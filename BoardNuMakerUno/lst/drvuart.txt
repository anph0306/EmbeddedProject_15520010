; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\drvuart.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\drvuart.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\Template -I..\NUC140BSP\CMSIS\CM0\DeviceSupport\Nuvoton\NUC1xx -I..\NUC140BSP\NuvotonPlatform_Keil\Include -I..\NUC140BSP\NuvotonPlatform_Keil\Include\Driver -I..\NUC140BSP\CMSIS\CM0\CoreSupport -I..\NUC140BSP\NuvotonPlatform_Keil\Include\NUC1xx-LB_002 -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\CMSIS\Include -ID:\Keil_v5\ARM\Inc\ST\STM32F10x -D__UVISION_VERSION=517 --omf_browse=.\obj\drvuart.crf ..\NUC140BSP\NuvotonPlatform_Keil\Src\Driver\DrvUART.c]
                          THUMB

                          AREA ||i.BaudRateCalculator||, CODE, READONLY, ALIGN=2

                  BaudRateCalculator PROC
;;;92     
;;;93     static void BaudRateCalculator(uint32_t clk, uint32_t baudRate, E_UART_PORT u32Port)
000000  b5f8              PUSH     {r3-r7,lr}
;;;94     {
;;;95       	int32_t tmp;
;;;96     	int32_t div;
;;;97       
;;;98       	UART_T * tUART;
;;;99     	tUART = (UART_T *)((uint32_t)UART0 + u32Port);  
000002  4b21              LDR      r3,|L1.136|
000004  18d4              ADDS     r4,r2,r3
;;;100    
;;;101    	if(((clk / baudRate)%16)<3)	      /* Source Clock mod 16 <3 => Using Divider X =16 (MODE#0) */ 
000006  f7fffffe          BL       __aeabi_uidivmod
00000a  4607              MOV      r7,r0
;;;102    	{								  
;;;103    		tUART->BAUD.DIV_X_EN = 0;
00000c  2101              MOVS     r1,#1
00000e  0700              LSLS     r0,r0,#28             ;101
000010  0749              LSLS     r1,r1,#29
000012  0f00              LSRS     r0,r0,#28             ;101
;;;104    	    tUART->BAUD.DIV_X_ONE   = 0;
000014  104a              ASRS     r2,r1,#1
000016  2803              CMP      r0,#3                 ;101
;;;105    		tmp = clk / baudRate/16  -2;
;;;106    	}
;;;107    	else							  /* Source Clock mod 16 >3 => Up 5% Error BaudRate */
;;;108    	{
;;;109    	    tUART->BAUD.DIV_X_EN = 1;			  /* Try to Set Divider X = 1 (MODE#2)*/
000018  6a60              LDR      r0,[r4,#0x24]
00001a  d207              BCS      |L1.44|
00001c  4388              BICS     r0,r0,r1              ;103
00001e  6260              STR      r0,[r4,#0x24]         ;103
000020  6a60              LDR      r0,[r4,#0x24]         ;104
000022  4390              BICS     r0,r0,r2              ;104
000024  6260              STR      r0,[r4,#0x24]         ;104
000026  093e              LSRS     r6,r7,#4              ;105
000028  1eb6              SUBS     r6,r6,#2              ;105
00002a  e026              B        |L1.122|
                  |L1.44|
00002c  4308              ORRS     r0,r0,r1
00002e  6260              STR      r0,[r4,#0x24]
;;;110    	    tUART->BAUD.DIV_X_ONE   = 1;
000030  6a60              LDR      r0,[r4,#0x24]
000032  4310              ORRS     r0,r0,r2
000034  6260              STR      r0,[r4,#0x24]
;;;111    		tmp = clk / baudRate  -2;
;;;112    
;;;113    		if(tmp > 0xFFFF)			  /* If Divider > Range  */
000036  4815              LDR      r0,|L1.140|
000038  1ebe              SUBS     r6,r7,#2              ;111
00003a  4286              CMP      r6,r0
00003c  dd1d              BLE      |L1.122|
;;;114    		{
;;;115    			tUART->BAUD.DIV_X_EN = 1;		  /* Try to Set Divider X up 10 (MODE#1) */
00003e  6a60              LDR      r0,[r4,#0x24]
000040  4308              ORRS     r0,r0,r1
000042  6260              STR      r0,[r4,#0x24]
;;;116    			tUART->BAUD.DIV_X_ONE   = 0;
000044  6a60              LDR      r0,[r4,#0x24]
000046  4390              BICS     r0,r0,r2
000048  6260              STR      r0,[r4,#0x24]
;;;117    
;;;118    			for(div = 8; div <16;div++)
00004a  2508              MOVS     r5,#8
                  |L1.76|
00004c  4638              MOV      r0,r7
;;;119    			{
;;;120    				if(((clk / baudRate)%(div+1))<3)
00004e  1c69              ADDS     r1,r5,#1
000050  f7fffffe          BL       __aeabi_uidivmod
000054  2903              CMP      r1,#3
000056  d20d              BCS      |L1.116|
;;;121    				{
;;;122    					tUART->BAUD.DIVIDER_X   = div;
000058  6a60              LDR      r0,[r4,#0x24]
00005a  210f              MOVS     r1,#0xf
00005c  0609              LSLS     r1,r1,#24
00005e  4388              BICS     r0,r0,r1
000060  0729              LSLS     r1,r5,#28
000062  0909              LSRS     r1,r1,#4
000064  4308              ORRS     r0,r0,r1
000066  6260              STR      r0,[r4,#0x24]
000068  4638              MOV      r0,r7
;;;123    					tmp = clk / baudRate / (div+1) -2;
00006a  1c69              ADDS     r1,r5,#1
00006c  f7fffffe          BL       __aeabi_uidivmod
000070  1e86              SUBS     r6,r0,#2
;;;124    					break;
000072  e002              B        |L1.122|
                  |L1.116|
000074  1c6d              ADDS     r5,r5,#1
000076  2d10              CMP      r5,#0x10              ;118
000078  dbe8              BLT      |L1.76|
                  |L1.122|
;;;125    				}
;;;126    			}
;;;127    		}
;;;128    	}
;;;129    
;;;130    	tUART->BAUD.BRD = tmp; 
00007a  6a60              LDR      r0,[r4,#0x24]
00007c  b2b1              UXTH     r1,r6
00007e  0c00              LSRS     r0,r0,#16
000080  0400              LSLS     r0,r0,#16
000082  4308              ORRS     r0,r0,r1
000084  6260              STR      r0,[r4,#0x24]
;;;131    
;;;132    }
000086  bdf8              POP      {r3-r7,pc}
;;;133    
                          ENDP

                  |L1.136|
                          DCD      0x40050000
                  |L1.140|
                          DCD      0x0000ffff

                          AREA ||i.DrvUART_ClearIntFlag||, CODE, READONLY, ALIGN=2

                  DrvUART_ClearIntFlag PROC
;;;531    /*---------------------------------------------------------------------------------------------------------*/
;;;532    uint32_t DrvUART_ClearIntFlag(E_UART_PORT u32Port,uint32_t u32InterruptFlag)
000000  4a18              LDR      r2,|L2.100|
;;;533    {
000002  b510              PUSH     {r4,lr}
;;;534    	UART_T * tUART;
;;;535    
;;;536    	tUART = (UART_T *)((uint32_t)UART0 + u32Port); 
000004  1880              ADDS     r0,r0,r2
;;;537    
;;;538        if((u32InterruptFlag & DRVUART_RDAINT_FLAG) ||
000006  058a              LSLS     r2,r1,#22
000008  0f92              LSRS     r2,r2,#30
00000a  d101              BNE      |L2.16|
;;;539           (u32InterruptFlag & DRVUART_THREINT_FLAG)||
;;;540           (u32InterruptFlag & DRVUART_TOUTINT_FLAG))
00000c  04ca              LSLS     r2,r1,#19
00000e  d501              BPL      |L2.20|
                  |L2.16|
;;;541            return E_DRVUART_ARGUMENT;
000010  4815              LDR      r0,|L2.104|
;;;542    
;;;543    	if(u32InterruptFlag & DRVUART_RLSINT)			        	/* clear Receive Line Status Interrupt */	   
;;;544    	{
;;;545    		tUART->FSR.BIF = 1;
;;;546    		tUART->FSR.FEF = 1;
;;;547    		tUART->FSR.PEF = 1;
;;;548    	}
;;;549    
;;;550    	if(u32InterruptFlag & DRVUART_MOSINT_FLAG)				    /* clear Modem Interrupt */	   
;;;551    		tUART->MSR.DCTSF = 1;
;;;552    
;;;553    
;;;554      	if(u32InterruptFlag & DRVUART_LININT_FLAG)      			/* clear LIN break Interrupt */	   
;;;555    		tUART->ISR.LIN_RX_BREAK_IF = 1;
;;;556    
;;;557    	if(u32InterruptFlag & DRVUART_BUFERRINT_FLAG)       		/* clear Buffer ErrorInterrupt */	   
;;;558    	{
;;;559    		tUART->FSR.TX_OVER_IF = 1;
;;;560    		tUART->FSR.RX_OVER_IF = 1;
;;;561    	}
;;;562    	return E_SUCCESS;
;;;563    }
000012  bd10              POP      {r4,pc}
                  |L2.20|
000014  074a              LSLS     r2,r1,#29             ;543
000016  d50b              BPL      |L2.48|
000018  6982              LDR      r2,[r0,#0x18]         ;545
00001a  2340              MOVS     r3,#0x40              ;545
00001c  431a              ORRS     r2,r2,r3              ;545
00001e  6182              STR      r2,[r0,#0x18]         ;545
000020  6982              LDR      r2,[r0,#0x18]         ;546
000022  2320              MOVS     r3,#0x20              ;546
000024  431a              ORRS     r2,r2,r3              ;546
000026  6182              STR      r2,[r0,#0x18]         ;546
000028  6982              LDR      r2,[r0,#0x18]         ;547
00002a  2310              MOVS     r3,#0x10              ;547
00002c  431a              ORRS     r2,r2,r3              ;547
00002e  6182              STR      r2,[r0,#0x18]         ;547
                  |L2.48|
000030  050b              LSLS     r3,r1,#20             ;550
000032  2201              MOVS     r2,#1                 ;551
000034  2b00              CMP      r3,#0                 ;550
000036  da02              BGE      |L2.62|
000038  6943              LDR      r3,[r0,#0x14]         ;551
00003a  4313              ORRS     r3,r3,r2              ;551
00003c  6143              STR      r3,[r0,#0x14]         ;551
                  |L2.62|
00003e  040b              LSLS     r3,r1,#16             ;554
000040  d503              BPL      |L2.74|
000042  69c3              LDR      r3,[r0,#0x1c]         ;555
000044  2480              MOVS     r4,#0x80              ;555
000046  4323              ORRS     r3,r3,r4              ;555
000048  61c3              STR      r3,[r0,#0x1c]         ;555
                  |L2.74|
00004a  0489              LSLS     r1,r1,#18             ;557
00004c  d507              BPL      |L2.94|
00004e  6981              LDR      r1,[r0,#0x18]         ;559
000050  2301              MOVS     r3,#1                 ;559
000052  061b              LSLS     r3,r3,#24             ;559
000054  4319              ORRS     r1,r1,r3              ;559
000056  6181              STR      r1,[r0,#0x18]         ;559
000058  6981              LDR      r1,[r0,#0x18]         ;560
00005a  4311              ORRS     r1,r1,r2              ;560
00005c  6181              STR      r1,[r0,#0x18]         ;560
                  |L2.94|
00005e  2000              MOVS     r0,#0                 ;562
000060  bd10              POP      {r4,pc}
;;;564    
                          ENDP

000062  0000              DCW      0x0000
                  |L2.100|
                          DCD      0x40050000
                  |L2.104|
                          DCD      0xffff9807

                          AREA ||i.DrvUART_Close||, CODE, READONLY, ALIGN=2

                  DrvUART_Close PROC
;;;381    
;;;382    void DrvUART_Close(E_UART_PORT u32Port)
000000  b510              PUSH     {r4,lr}
;;;383    {
;;;384    	if(u32Port == UART_PORT1)	
000002  2101              MOVS     r1,#1
000004  0509              LSLS     r1,r1,#20
000006  2300              MOVS     r3,#0
;;;385    	{
;;;386    		while(!UART1->FSR.TE_FLAG);
;;;387    		SYSCLK->APBCLK.UART1_EN = 0;
000008  4a16              LDR      r2,|L3.100|
;;;388    		g_pfnUART1callback = NULL;
00000a  4c17              LDR      r4,|L3.104|
00000c  4288              CMP      r0,r1                 ;384
00000e  d10b              BNE      |L3.40|
000010  4816              LDR      r0,|L3.108|
                  |L3.18|
000012  6981              LDR      r1,[r0,#0x18]         ;386
000014  00c9              LSLS     r1,r1,#3              ;386
000016  d5fc              BPL      |L3.18|
000018  6890              LDR      r0,[r2,#8]            ;387
00001a  2101              MOVS     r1,#1                 ;387
00001c  0449              LSLS     r1,r1,#17             ;387
00001e  4388              BICS     r0,r0,r1              ;387
000020  6090              STR      r0,[r2,#8]            ;387
;;;389            NVIC_DisableIRQ (UART1_IRQn); 
000022  200d              MOVS     r0,#0xd
000024  6063              STR      r3,[r4,#4]  ; g_pfnUART1callback
000026  e019              B        |L3.92|
                  |L3.40|
;;;390    	}
;;;391    	else if(u32Port == UART_PORT2)	
000028  2141              MOVS     r1,#0x41
00002a  0389              LSLS     r1,r1,#14
00002c  4288              CMP      r0,r1
00002e  d10a              BNE      |L3.70|
;;;392    	{
;;;393    		while(!UART2->FSR.TE_FLAG);
000030  480f              LDR      r0,|L3.112|
                  |L3.50|
000032  6981              LDR      r1,[r0,#0x18]
000034  00c9              LSLS     r1,r1,#3
000036  d5fc              BPL      |L3.50|
;;;394    		SYSCLK->APBCLK.UART2_EN = 0;
000038  6890              LDR      r0,[r2,#8]
00003a  2101              MOVS     r1,#1
00003c  0489              LSLS     r1,r1,#18
00003e  4388              BICS     r0,r0,r1
000040  6090              STR      r0,[r2,#8]
;;;395    		g_pfnUART2callback = NULL;
;;;396            NVIC_DisableIRQ (UART0_IRQn); 
000042  60a3              STR      r3,[r4,#8]  ; g_pfnUART2callback
000044  e009              B        |L3.90|
                  |L3.70|
;;;397    	}
;;;398    	else
;;;399    	{
;;;400    		while(!UART0->FSR.TE_FLAG);
000046  480b              LDR      r0,|L3.116|
                  |L3.72|
000048  6981              LDR      r1,[r0,#0x18]
00004a  00c9              LSLS     r1,r1,#3
00004c  d5fc              BPL      |L3.72|
;;;401    		SYSCLK->APBCLK.UART0_EN = 0;
00004e  6890              LDR      r0,[r2,#8]
000050  2101              MOVS     r1,#1
000052  0409              LSLS     r1,r1,#16
000054  4388              BICS     r0,r0,r1
000056  6090              STR      r0,[r2,#8]
;;;402    		g_pfnUART0callback = NULL;
000058  6023              STR      r3,[r4,#0]  ; g_pfnUART0callback
                  |L3.90|
00005a  200c              MOVS     r0,#0xc               ;396
                  |L3.92|
00005c  f7fffffe          BL       NVIC_DisableIRQ
;;;403            NVIC_DisableIRQ(UART0_IRQn);      
;;;404    	}
;;;405    }
000060  bd10              POP      {r4,pc}
;;;406    
                          ENDP

000062  0000              DCW      0x0000
                  |L3.100|
                          DCD      0x50000200
                  |L3.104|
                          DCD      ||.data||
                  |L3.108|
                          DCD      0x40150000
                  |L3.112|
                          DCD      0x40154000
                  |L3.116|
                          DCD      0x40050000

                          AREA ||i.DrvUART_DisableInt||, CODE, READONLY, ALIGN=2

                  DrvUART_DisableInt PROC
;;;477    /*---------------------------------------------------------------------------------------------------------*/
;;;478    void DrvUART_DisableInt(E_UART_PORT u32Port,uint32_t u32InterruptFlag)
000000  b570              PUSH     {r4-r6,lr}
;;;479    {
000002  2200              MOVS     r2,#0
;;;480    	if(u32Port == UART_PORT0)			   
;;;481    	{
;;;482    		outpw(&UART0->IER + u32Port,inpw(&UART0->IER + u32Port) &~u32InterruptFlag);	   /* Disable INT  */
000004  4b13              LDR      r3,|L4.84|
000006  2800              CMP      r0,#0                 ;480
000008  d102              BNE      |L4.16|
00000a  685c              LDR      r4,[r3,#4]
00000c  438c              BICS     r4,r4,r1
00000e  605c              STR      r4,[r3,#4]
                  |L4.16|
;;;483    	}
;;;484    	
;;;485    	if(u32InterruptFlag & DRVUART_TOUTINT)			  							 /* Disable Counter Enable */
;;;486    	{
;;;487    		if(u32Port == UART_PORT0)
;;;488    			UART0->IER.RTO_IEN = 0;
;;;489    		else if(u32Port == UART_PORT1)
000010  4c11              LDR      r4,|L4.88|
000012  06c9              LSLS     r1,r1,#27             ;485
000014  d50a              BPL      |L4.44|
000016  2110              MOVS     r1,#0x10              ;488
000018  2800              CMP      r0,#0                 ;487
00001a  d004              BEQ      |L4.38|
00001c  42a0              CMP      r0,r4
00001e  d101              BNE      |L4.36|
;;;490    			UART1->IER.RTO_IEN = 0;
000020  4b0e              LDR      r3,|L4.92|
000022  e000              B        |L4.38|
                  |L4.36|
;;;491    		else
;;;492    			UART2->IER.RTO_IEN = 0;
000024  4b0e              LDR      r3,|L4.96|
                  |L4.38|
000026  685d              LDR      r5,[r3,#4]            ;490
000028  438d              BICS     r5,r5,r1              ;490
00002a  605d              STR      r5,[r3,#4]            ;490
                  |L4.44|
;;;493    			
;;;494    	}
;;;495    	
;;;496    	switch (u32Port)									   			 /* Disable Callback function and NVIC */
;;;497        {
;;;498            case UART_PORT0:
;;;499    			g_pfnUART0callback = NULL;
00002c  490d              LDR      r1,|L4.100|
00002e  2800              CMP      r0,#0                 ;496
000030  d00a              BEQ      |L4.72|
000032  1b00              SUBS     r0,r0,r4              ;496
000034  d00a              BEQ      |L4.76|
000036  2301              MOVS     r3,#1                 ;496
000038  039b              LSLS     r3,r3,#14             ;496
00003a  4298              CMP      r0,r3                 ;496
00003c  d103              BNE      |L4.70|
;;;500                NVIC_DisableIRQ(UART0_IRQn);   
;;;501                break;
;;;502    
;;;503            case UART_PORT1:
;;;504    			g_pfnUART1callback = NULL;
;;;505               	NVIC_DisableIRQ(UART1_IRQn);    
;;;506                break;
;;;507            
;;;508    		case UART_PORT2:
;;;509    			g_pfnUART2callback = NULL;
00003e  608a              STR      r2,[r1,#8]  ; g_pfnUART2callback
                  |L4.64|
000040  200c              MOVS     r0,#0xc               ;500
                  |L4.66|
;;;510               	NVIC_DisableIRQ(UART0_IRQn);    
000042  f7fffffe          BL       NVIC_DisableIRQ
                  |L4.70|
;;;511                break;
;;;512    
;;;513            default:
;;;514                break;
;;;515        }
;;;516    
;;;517    }
000046  bd70              POP      {r4-r6,pc}
                  |L4.72|
000048  600a              STR      r2,[r1,#0]            ;501  ; g_pfnUART0callback
00004a  e7f9              B        |L4.64|
                  |L4.76|
00004c  200d              MOVS     r0,#0xd               ;505
00004e  604a              STR      r2,[r1,#4]            ;506  ; g_pfnUART1callback
000050  e7f7              B        |L4.66|
;;;518    
                          ENDP

000052  0000              DCW      0x0000
                  |L4.84|
                          DCD      0x40050000
                  |L4.88|
                          DCD      0x00100000
                  |L4.92|
                          DCD      0x40150000
                  |L4.96|
                          DCD      0x40154000
                  |L4.100|
                          DCD      ||.data||

                          AREA ||i.DrvUART_DisablePDMA||, CODE, READONLY, ALIGN=2

                  DrvUART_DisablePDMA PROC
;;;739    /*---------------------------------------------------------------------------------------------------------*/
;;;740    void DrvUART_DisablePDMA(E_UART_PORT u32Port)
000000  2101              MOVS     r1,#1
;;;741    {
;;;742    	
;;;743    	if(u32Port == UART_PORT0)
;;;744    	{
;;;745    		UART0->IER.DMA_TX_EN 	= 0;
000002  0389              LSLS     r1,r1,#14
;;;746    		UART0->IER.DMA_RX_EN	= 0;	
000004  004b              LSLS     r3,r1,#1
000006  2800              CMP      r0,#0                 ;743
000008  d00a              BEQ      |L5.32|
;;;747    	}
;;;748    	else if(u32Port == UART_PORT1)
00000a  018a              LSLS     r2,r1,#6
00000c  4290              CMP      r0,r2
00000e  d106              BNE      |L5.30|
;;;749    	{
;;;750    		UART1->IER.DMA_TX_EN 	= 0;
000010  4804              LDR      r0,|L5.36|
                  |L5.18|
000012  6842              LDR      r2,[r0,#4]            ;745
000014  438a              BICS     r2,r2,r1              ;745
000016  6042              STR      r2,[r0,#4]            ;745
000018  6841              LDR      r1,[r0,#4]            ;746
00001a  4399              BICS     r1,r1,r3              ;746
00001c  6041              STR      r1,[r0,#4]            ;746
                  |L5.30|
;;;751    		UART1->IER.DMA_RX_EN	= 0;
;;;752    	}
;;;753    
;;;754    }
00001e  4770              BX       lr
                  |L5.32|
000020  4801              LDR      r0,|L5.40|
000022  e7f6              B        |L5.18|
;;;755    
                          ENDP

                  |L5.36|
                          DCD      0x40150000
                  |L5.40|
                          DCD      0x40050000

                          AREA ||i.DrvUART_EnableInt||, CODE, READONLY, ALIGN=2

                  DrvUART_EnableInt PROC
;;;422    /*---------------------------------------------------------------------------------------------------------*/
;;;423    void DrvUART_EnableInt(
000000  b530              PUSH     {r4,r5,lr}
;;;424    	E_UART_PORT   u32Port,
;;;425    	uint32_t  u32InterruptFlag,
;;;426    	PFN_DRVUART_CALLBACK pfncallback
;;;427    )
;;;428    {
;;;429    	UART_T * tUART;
;;;430        
;;;431    	tUART = (UART_T *)((uint32_t)UART0 + u32Port); 
000002  4b30              LDR      r3,|L6.196|
000004  18c3              ADDS     r3,r0,r3
;;;432    
;;;433    	tUART->IER.RDA_IEN		=(u32InterruptFlag & DRVUART_RDAINT)?1:0 ;
000006  685c              LDR      r4,[r3,#4]
000008  07cd              LSLS     r5,r1,#31
00000a  0864              LSRS     r4,r4,#1
00000c  0064              LSLS     r4,r4,#1
00000e  0fed              LSRS     r5,r5,#31
000010  432c              ORRS     r4,r4,r5
000012  605c              STR      r4,[r3,#4]
;;;434    	tUART->IER.THRE_IEN		=(u32InterruptFlag & DRVUART_THREINT)?1:0;
000014  078c              LSLS     r4,r1,#30
000016  2502              MOVS     r5,#2
000018  2c00              CMP      r4,#0
00001a  685c              LDR      r4,[r3,#4]
00001c  da01              BGE      |L6.34|
00001e  432c              ORRS     r4,r4,r5
000020  e000              B        |L6.36|
                  |L6.34|
000022  43ac              BICS     r4,r4,r5
                  |L6.36|
000024  605c              STR      r4,[r3,#4]
;;;435    	tUART->IER.RLS_IEN		=(u32InterruptFlag & DRVUART_RLSINT)?1:0;
000026  074c              LSLS     r4,r1,#29
000028  2504              MOVS     r5,#4
00002a  2c00              CMP      r4,#0
00002c  685c              LDR      r4,[r3,#4]
00002e  da01              BGE      |L6.52|
000030  432c              ORRS     r4,r4,r5
000032  e000              B        |L6.54|
                  |L6.52|
000034  43ac              BICS     r4,r4,r5
                  |L6.54|
000036  605c              STR      r4,[r3,#4]
;;;436    	tUART->IER.MODEM_IEN	=(u32InterruptFlag & DRVUART_MOSINT)?1:0;
000038  070c              LSLS     r4,r1,#28
00003a  2508              MOVS     r5,#8
00003c  2c00              CMP      r4,#0
00003e  685c              LDR      r4,[r3,#4]
000040  da01              BGE      |L6.70|
000042  432c              ORRS     r4,r4,r5
000044  e000              B        |L6.72|
                  |L6.70|
000046  43ac              BICS     r4,r4,r5
                  |L6.72|
000048  605c              STR      r4,[r3,#4]
;;;437    		
;;;438    	tUART->IER.TIME_OUT_EN		=(u32InterruptFlag & DRVUART_TOUTINT)?1:0;   	/* Time-out count enable */
00004a  06cc              LSLS     r4,r1,#27
00004c  4d1e              LDR      r5,|L6.200|
00004e  685c              LDR      r4,[r3,#4]
000050  d501              BPL      |L6.86|
000052  432c              ORRS     r4,r4,r5
000054  e000              B        |L6.88|
                  |L6.86|
000056  43ac              BICS     r4,r4,r5
                  |L6.88|
000058  605c              STR      r4,[r3,#4]
;;;439    	tUART->IER.RTO_IEN		=(u32InterruptFlag & DRVUART_TOUTINT)?1:0;		/* Time-out INT enable */
00005a  06cc              LSLS     r4,r1,#27
00005c  2510              MOVS     r5,#0x10
00005e  2c00              CMP      r4,#0
000060  685c              LDR      r4,[r3,#4]
000062  da01              BGE      |L6.104|
000064  432c              ORRS     r4,r4,r5
000066  e000              B        |L6.106|
                  |L6.104|
000068  43ac              BICS     r4,r4,r5
                  |L6.106|
00006a  605c              STR      r4,[r3,#4]
;;;440    
;;;441    	tUART->IER.BUF_ERR_IEN	=(u32InterruptFlag & DRVUART_BUFERRINT)?1:0;
00006c  068c              LSLS     r4,r1,#26
00006e  2520              MOVS     r5,#0x20
000070  2c00              CMP      r4,#0
000072  685c              LDR      r4,[r3,#4]
000074  da01              BGE      |L6.122|
000076  432c              ORRS     r4,r4,r5
000078  e000              B        |L6.124|
                  |L6.122|
00007a  43ac              BICS     r4,r4,r5
                  |L6.124|
00007c  605c              STR      r4,[r3,#4]
;;;442    	tUART->IER.WAKE_EN		=(u32InterruptFlag & DRVUART_WAKEUPINT)?1:0;
00007e  060c              LSLS     r4,r1,#24
000080  2540              MOVS     r5,#0x40
000082  2c00              CMP      r4,#0
000084  685c              LDR      r4,[r3,#4]
000086  da01              BGE      |L6.140|
000088  432c              ORRS     r4,r4,r5
00008a  e000              B        |L6.142|
                  |L6.140|
00008c  43ac              BICS     r4,r4,r5
                  |L6.142|
00008e  605c              STR      r4,[r3,#4]
;;;443    	tUART->IER.LIN_RX_BRK_IEN=(u32InterruptFlag & DRVUART_LININT)?1:0;
000090  05c9              LSLS     r1,r1,#23
000092  4c0e              LDR      r4,|L6.204|
000094  6859              LDR      r1,[r3,#4]
000096  d501              BPL      |L6.156|
000098  4321              ORRS     r1,r1,r4
00009a  e000              B        |L6.158|
                  |L6.156|
00009c  43a1              BICS     r1,r1,r4
                  |L6.158|
00009e  6059              STR      r1,[r3,#4]
0000a0  2401              MOVS     r4,#1
0000a2  0324              LSLS     r4,r4,#12
;;;444    
;;;445    
;;;446        if(u32Port == UART_PORT0)											   	/* Install Callback function */
;;;447        {
;;;448    		g_pfnUART0callback = pfncallback;        
0000a4  490a              LDR      r1,|L6.208|
0000a6  4b0b              LDR      r3,|L6.212|
0000a8  2800              CMP      r0,#0                 ;446
0000aa  d006              BEQ      |L6.186|
;;;449    		NVIC_EnableIRQ(UART0_IRQn); 
;;;450        }
;;;451    	else if(u32Port == UART_PORT1)										   	/* Install Callback function */
0000ac  0225              LSLS     r5,r4,#8
0000ae  42a8              CMP      r0,r5
0000b0  d105              BNE      |L6.190|
0000b2  11c0              ASRS     r0,r0,#7
0000b4  604a              STR      r2,[r1,#4]  ; g_pfnUART1callback
0000b6  6018              STR      r0,[r3,#0]
;;;452    	{
;;;453    		g_pfnUART1callback = pfncallback;
;;;454    		NVIC_EnableIRQ(UART1_IRQn); 
;;;455    	}
;;;456    	else															    	/* Install Callback function */
;;;457        {
;;;458    		g_pfnUART2callback = pfncallback;
;;;459    		NVIC_EnableIRQ(UART0_IRQn); 
;;;460        }
;;;461    
;;;462    }
0000b8  bd30              POP      {r4,r5,pc}
                  |L6.186|
0000ba  600a              STR      r2,[r1,#0]            ;449  ; g_pfnUART0callback
0000bc  e000              B        |L6.192|
                  |L6.190|
0000be  608a              STR      r2,[r1,#8]            ;458  ; g_pfnUART2callback
                  |L6.192|
0000c0  601c              STR      r4,[r3,#0]            ;458
0000c2  bd30              POP      {r4,r5,pc}
;;;463    
                          ENDP

                  |L6.196|
                          DCD      0x40050000
                  |L6.200|
                          DCD      0x00000800
                  |L6.204|
                          DCD      0x00000100
                  |L6.208|
                          DCD      ||.data||
                  |L6.212|
                          DCD      0xe000e100

                          AREA ||i.DrvUART_EnablePDMA||, CODE, READONLY, ALIGN=2

                  DrvUART_EnablePDMA PROC
;;;711    /*---------------------------------------------------------------------------------------------------------*/
;;;712    void DrvUART_EnablePDMA(E_UART_PORT u32Port)
000000  2101              MOVS     r1,#1
;;;713    {
;;;714    	
;;;715    	if(u32Port == UART_PORT0)
;;;716    	{
;;;717    		UART0->IER.DMA_TX_EN 	= 1;
000002  0389              LSLS     r1,r1,#14
;;;718    		UART0->IER.DMA_RX_EN	= 1;	
000004  004b              LSLS     r3,r1,#1
000006  2800              CMP      r0,#0                 ;715
000008  d00a              BEQ      |L7.32|
;;;719    	}
;;;720    	else if(u32Port == UART_PORT1)
00000a  018a              LSLS     r2,r1,#6
00000c  4290              CMP      r0,r2
00000e  d106              BNE      |L7.30|
;;;721    	{
;;;722    		UART1->IER.DMA_TX_EN 	= 1;
000010  4804              LDR      r0,|L7.36|
                  |L7.18|
000012  6842              LDR      r2,[r0,#4]            ;717
000014  430a              ORRS     r2,r2,r1              ;717
000016  6042              STR      r2,[r0,#4]            ;717
000018  6841              LDR      r1,[r0,#4]            ;718
00001a  4319              ORRS     r1,r1,r3              ;718
00001c  6041              STR      r1,[r0,#4]            ;718
                  |L7.30|
;;;723    		UART1->IER.DMA_RX_EN	= 1;
;;;724    	}
;;;725    
;;;726    }
00001e  4770              BX       lr
                  |L7.32|
000020  4801              LDR      r0,|L7.40|
000022  e7f6              B        |L7.18|
;;;727    
                          ENDP

                  |L7.36|
                          DCD      0x40150000
                  |L7.40|
                          DCD      0x40050000

                          AREA ||i.DrvUART_GetCTSInfo||, CODE, READONLY, ALIGN=2

                  DrvUART_GetCTSInfo PROC
;;;608    /*---------------------------------------------------------------------------------------------------------*/
;;;609    void DrvUART_GetCTSInfo(E_UART_PORT u32Port,uint8_t *pu8CTSValue,	uint8_t	*pu8CTSChangeState)
000000  4b05              LDR      r3,|L8.24|
;;;610    {
;;;611    	UART_T * tUART;
;;;612    
;;;613    	tUART = (UART_T *)((uint32_t)UART0 + u32Port);  
000002  18c0              ADDS     r0,r0,r3
;;;614    
;;;615     	*pu8CTSValue 		= tUART->MSR.CTS_ST;
000004  6943              LDR      r3,[r0,#0x14]
000006  06db              LSLS     r3,r3,#27
000008  0fdb              LSRS     r3,r3,#31
00000a  700b              STRB     r3,[r1,#0]
;;;616    	*pu8CTSChangeState 	= tUART->MSR.DCTSF;
00000c  6940              LDR      r0,[r0,#0x14]
00000e  07c0              LSLS     r0,r0,#31
000010  0fc0              LSRS     r0,r0,#31
000012  7010              STRB     r0,[r2,#0]
;;;617    }	
000014  4770              BX       lr
;;;618    
                          ENDP

000016  0000              DCW      0x0000
                  |L8.24|
                          DCD      0x40050000

                          AREA ||i.DrvUART_GetIntStatus||, CODE, READONLY, ALIGN=2

                  DrvUART_GetIntStatus PROC
;;;582    /*---------------------------------------------------------------------------------------------------------*/
;;;583    int32_t DrvUART_GetIntStatus(E_UART_PORT u32Port,uint32_t u32InterruptFlag)
000000  4a02              LDR      r2,|L9.12|
;;;584    {
;;;585    
;;;586    	UART_T * tUART;
;;;587    
;;;588    	tUART = (UART_T *)((uint32_t)UART0 + u32Port); 
000002  1880              ADDS     r0,r0,r2
;;;589       
;;;590        return (tUART->u32ISR & u32InterruptFlag)>>u32InterruptFlag ;
000004  69c0              LDR      r0,[r0,#0x1c]
000006  4008              ANDS     r0,r0,r1
000008  40c8              LSRS     r0,r0,r1
;;;591    
;;;592    }
00000a  4770              BX       lr
;;;593    
                          ENDP

                  |L9.12|
                          DCD      0x40050000

                          AREA ||i.DrvUART_GetVersion||, CODE, READONLY, ALIGN=2

                  DrvUART_GetVersion PROC
;;;865    /*---------------------------------------------------------------------------------------------------------*/
;;;866    int32_t	DrvUART_GetVersion(void)
000000  4800              LDR      r0,|L10.4|
;;;867    {
;;;868    	return DRVUART_VERSION_NUM;
;;;869    	
;;;870    }
000002  4770              BX       lr
;;;871    
                          ENDP

                  |L10.4|
                          DCD      0x00010204

                          AREA ||i.DrvUART_Open||, CODE, READONLY, ALIGN=2

                  DrvUART_Open PROC
;;;233    /*---------------------------------------------------------------------------------------------------------*/
;;;234    int32_t DrvUART_Open(E_UART_PORT u32Port, STR_UART_T *sParam)
000000  b570              PUSH     {r4-r6,lr}
;;;235    {
;;;236    
;;;237    	UART_T * tUART;
;;;238       
;;;239        /*-----------------------------------------------------------------------------------------------------*/
;;;240        /* Check UART port                                                                                     */
;;;241        /*-----------------------------------------------------------------------------------------------------*/
;;;242        if ((u32Port != UART_PORT0) &&
;;;243            (u32Port != UART_PORT1) &&
000002  4a68              LDR      r2,|L11.420|
000004  460c              MOV      r4,r1                 ;235
000006  0005              MOVS     r5,r0                 ;235
000008  d007              BEQ      |L11.26|
00000a  4295              CMP      r5,r2
00000c  d005              BEQ      |L11.26|
;;;244    		(u32Port != UART_PORT2))
00000e  2041              MOVS     r0,#0x41
000010  0380              LSLS     r0,r0,#14
000012  4285              CMP      r5,r0
000014  d001              BEQ      |L11.26|
;;;245        {
;;;246    
;;;247    		return E_DRVUART_ERR_PORT_INVALID;
000016  4864              LDR      r0,|L11.424|
;;;248        }
;;;249    
;;;250    
;;;251        /*-----------------------------------------------------------------------------------------------------*/
;;;252        /* Check the supplied parity                                                                           */
;;;253        /*-----------------------------------------------------------------------------------------------------*/
;;;254        if ((sParam->u8cParity != DRVUART_PARITY_NONE) &&
;;;255            (sParam->u8cParity != DRVUART_PARITY_EVEN) &&
;;;256            (sParam->u8cParity != DRVUART_PARITY_ODD)  &&
;;;257            (sParam->u8cParity != DRVUART_PARITY_MARK) &&
;;;258            (sParam->u8cParity != DRVUART_PARITY_SPACE))
;;;259        {
;;;260     		return E_DRVUART_ERR_PARITY_INVALID;		
;;;261        }
;;;262        /*-----------------------------------------------------------------------------------------------------*/
;;;263        /* Check the supplied number of data bits                                                              */
;;;264        /*-----------------------------------------------------------------------------------------------------*/
;;;265        else if ((sParam->u8cDataBits != DRVUART_DATABITS_5) &&
;;;266                 (sParam->u8cDataBits != DRVUART_DATABITS_6) &&
;;;267                 (sParam->u8cDataBits != DRVUART_DATABITS_7) &&
;;;268                 (sParam->u8cDataBits != DRVUART_DATABITS_8))
;;;269        {
;;;270     		return E_DRVUART_ERR_DATA_BITS_INVALID;	 
;;;271        }
;;;272        /*-----------------------------------------------------------------------------------------------------*/
;;;273        /* Check the supplied number of stop bits                                                              */
;;;274        /*-----------------------------------------------------------------------------------------------------*/
;;;275        else if ((sParam->u8cStopBits != DRVUART_STOPBITS_1) &&
;;;276                 (sParam->u8cStopBits != DRVUART_STOPBITS_2) &&
;;;277                 (sParam->u8cStopBits != DRVUART_STOPBITS_1_5)
;;;278                 )
;;;279        {
;;;280          	return E_DRVUART_ERR_STOP_BITS_INVALID;	 
;;;281        }
;;;282    
;;;283    
;;;284        /*-----------------------------------------------------------------------------------------------------*/
;;;285        /* Check the supplied nember of trigger level bytes                                                    */
;;;286        /*-----------------------------------------------------------------------------------------------------*/
;;;287        else if ((sParam->u8cRxTriggerLevel != DRVUART_FIFO_1BYTES) &&
;;;288                 (sParam->u8cRxTriggerLevel != DRVUART_FIFO_4BYTES) &&
;;;289                 (sParam->u8cRxTriggerLevel != DRVUART_FIFO_8BYTES) &&
;;;290                 (sParam->u8cRxTriggerLevel != DRVUART_FIFO_14BYTES)&&
;;;291                 (sParam->u8cRxTriggerLevel != DRVUART_FIFO_30BYTES)&&
;;;292                 (sParam->u8cRxTriggerLevel != DRVUART_FIFO_46BYTES)&&
;;;293                 (sParam->u8cRxTriggerLevel != DRVUART_FIFO_62BYTES))
;;;294        {
;;;295    		return E_DRVUART_ERR_TRIGGERLEVEL_INVALID;		 
;;;296        }				
;;;297    
;;;298    	if(u32Port == UART_PORT0)
;;;299    	{
;;;300    		/* Reset IP */
;;;301    		SYS->IPRSTC2.UART0_RST = 1;
;;;302    		SYS->IPRSTC2.UART0_RST = 0;
;;;303    		
;;;304    		/* Enable UART clock */
;;;305    	    SYSCLK->APBCLK.UART0_EN = 1;
;;;306    	}
;;;307    	else if(u32Port == UART_PORT1)
;;;308    	{
;;;309    		/* Reset IP */
;;;310    		SYS->IPRSTC2.UART1_RST = 1;
;;;311    		SYS->IPRSTC2.UART1_RST = 0;
;;;312    		
;;;313    		/* Enable UART clock */
;;;314    	    SYSCLK->APBCLK.UART1_EN = 1;
;;;315    	}
;;;316    	else
;;;317    	{
;;;318    		/* Reset IP */
;;;319    		SYS->IPRSTC2.UART2_RST = 1;
;;;320    		SYS->IPRSTC2.UART2_RST = 0;
;;;321    		
;;;322    		/* Enable UART clock */
;;;323    	    SYSCLK->APBCLK.UART2_EN = 1;
;;;324    	}
;;;325    	
;;;326    	tUART = (UART_T *)((uint32_t)UART0 + u32Port); 
;;;327    
;;;328    
;;;329    	/* Tx FIFO Reset & Rx FIFO Reset & FIFO Mode Enable */
;;;330      	tUART->FCR.TFR =1;
;;;331      	tUART->FCR.RFR =1;
;;;332    
;;;333    	/* Set Rx Trigger Level */
;;;334    	tUART->FCR.RFITL = sParam->u8cRxTriggerLevel;  
;;;335    	
;;;336    	/* Set Parity & Data bits & Stop bits */
;;;337    	tUART->LCR.SPE	=((sParam->u8cParity)&0x4)?1:0;
;;;338    	tUART->LCR.EPE	=((sParam->u8cParity)&0x2)?1:0;
;;;339    	tUART->LCR.PBE	=((sParam->u8cParity)&0x1)?1:0;
;;;340    		
;;;341    	tUART->LCR.WLS	=sParam->u8cDataBits;
;;;342    	tUART->LCR.NSB	=sParam->u8cStopBits;
;;;343    		
;;;344    	/* Set Time-Out */
;;;345    	tUART->TOR.TOIC	=sParam->u8TimeOut;
;;;346    
;;;347        /* Check Clock Source */
;;;348        if(SYSCLK->PWRCON.XTL12M_EN)
;;;349            SYSCLK->CLKSEL1.UART_S = 0;
;;;350        else
;;;351        {
;;;352            if(SYSCLK->PLLCON.PD==0)
;;;353                SYSCLK->CLKSEL1.UART_S = 1;
;;;354            else
;;;355                if(SYSCLK->PWRCON.OSC22M_EN)
;;;356                    SYSCLK->CLKSEL1.UART_S = 3;
;;;357                else
;;;358                    return E_DRVUART_ERR_OPEN;
;;;359        }
;;;360     
;;;361    	/* Set BaudRate */
;;;362        BaudRateCalculator(GetUartClk(), sParam->u32BaudRate, u32Port);
;;;363        
;;;364    
;;;365    	return E_SUCCESS;
;;;366    }
000018  bd70              POP      {r4-r6,pc}
                  |L11.26|
00001a  79a0              LDRB     r0,[r4,#6]            ;254
00001c  2800              CMP      r0,#0                 ;254
00001e  d00a              BEQ      |L11.54|
000020  2803              CMP      r0,#3                 ;255
000022  d008              BEQ      |L11.54|
000024  2801              CMP      r0,#1                 ;256
000026  d006              BEQ      |L11.54|
000028  2805              CMP      r0,#5                 ;257
00002a  d004              BEQ      |L11.54|
00002c  2807              CMP      r0,#7                 ;258
00002e  d002              BEQ      |L11.54|
000030  485d              LDR      r0,|L11.424|
000032  1c40              ADDS     r0,r0,#1              ;260
000034  bd70              POP      {r4-r6,pc}
                  |L11.54|
000036  7920              LDRB     r0,[r4,#4]            ;265
000038  2800              CMP      r0,#0                 ;265
00003a  d008              BEQ      |L11.78|
00003c  2801              CMP      r0,#1                 ;266
00003e  d006              BEQ      |L11.78|
000040  2802              CMP      r0,#2                 ;267
000042  d004              BEQ      |L11.78|
000044  2803              CMP      r0,#3                 ;268
000046  d002              BEQ      |L11.78|
000048  4857              LDR      r0,|L11.424|
00004a  1c80              ADDS     r0,r0,#2              ;270
00004c  bd70              POP      {r4-r6,pc}
                  |L11.78|
00004e  7960              LDRB     r0,[r4,#5]            ;275
000050  2800              CMP      r0,#0                 ;275
000052  d004              BEQ      |L11.94|
000054  2801              CMP      r0,#1                 ;276
000056  d002              BEQ      |L11.94|
000058  4853              LDR      r0,|L11.424|
00005a  1cc0              ADDS     r0,r0,#3              ;280
00005c  bd70              POP      {r4-r6,pc}
                  |L11.94|
00005e  79e1              LDRB     r1,[r4,#7]            ;287
000060  2900              CMP      r1,#0                 ;287
000062  d00e              BEQ      |L11.130|
000064  2901              CMP      r1,#1                 ;288
000066  d00c              BEQ      |L11.130|
000068  2902              CMP      r1,#2                 ;289
00006a  d00a              BEQ      |L11.130|
00006c  2903              CMP      r1,#3                 ;290
00006e  d008              BEQ      |L11.130|
000070  2904              CMP      r1,#4                 ;291
000072  d006              BEQ      |L11.130|
000074  2905              CMP      r1,#5                 ;292
000076  d004              BEQ      |L11.130|
000078  2906              CMP      r1,#6                 ;293
00007a  d002              BEQ      |L11.130|
00007c  484a              LDR      r0,|L11.424|
00007e  1d00              ADDS     r0,r0,#4              ;295
000080  bd70              POP      {r4-r6,pc}
                  |L11.130|
000082  2005              MOVS     r0,#5                 ;301
000084  0700              LSLS     r0,r0,#28             ;301
000086  4949              LDR      r1,|L11.428|
000088  2d00              CMP      r5,#0                 ;298
00008a  d004              BEQ      |L11.150|
00008c  68c3              LDR      r3,[r0,#0xc]          ;319
00008e  4295              CMP      r5,r2                 ;307
000090  d105              BNE      |L11.158|
000092  020a              LSLS     r2,r1,#8              ;310
000094  e005              B        |L11.162|
                  |L11.150|
000096  68c3              LDR      r3,[r0,#0xc]          ;301
000098  2201              MOVS     r2,#1                 ;301
00009a  0412              LSLS     r2,r2,#16             ;301
00009c  e001              B        |L11.162|
                  |L11.158|
00009e  2201              MOVS     r2,#1                 ;319
0000a0  0492              LSLS     r2,r2,#18             ;319
                  |L11.162|
0000a2  4313              ORRS     r3,r3,r2              ;310
0000a4  60c3              STR      r3,[r0,#0xc]          ;310
0000a6  68c3              LDR      r3,[r0,#0xc]          ;311
0000a8  4393              BICS     r3,r3,r2              ;311
0000aa  60c3              STR      r3,[r0,#0xc]          ;311
0000ac  6888              LDR      r0,[r1,#8]            ;314
0000ae  4310              ORRS     r0,r0,r2              ;314
0000b0  6088              STR      r0,[r1,#8]            ;314
0000b2  483f              LDR      r0,|L11.432|
0000b4  182b              ADDS     r3,r5,r0              ;326
0000b6  6898              LDR      r0,[r3,#8]            ;330
0000b8  2204              MOVS     r2,#4                 ;330
0000ba  4310              ORRS     r0,r0,r2              ;330
0000bc  6098              STR      r0,[r3,#8]            ;330
0000be  6898              LDR      r0,[r3,#8]            ;331
0000c0  2602              MOVS     r6,#2                 ;331
0000c2  4330              ORRS     r0,r0,r6              ;331
0000c4  6098              STR      r0,[r3,#8]            ;331
0000c6  6898              LDR      r0,[r3,#8]            ;334
0000c8  26f0              MOVS     r6,#0xf0              ;334
0000ca  43b0              BICS     r0,r0,r6              ;334
0000cc  79e6              LDRB     r6,[r4,#7]            ;334
0000ce  0736              LSLS     r6,r6,#28             ;334
0000d0  0e36              LSRS     r6,r6,#24             ;334
0000d2  4330              ORRS     r0,r0,r6              ;334
0000d4  6098              STR      r0,[r3,#8]            ;334
0000d6  79a0              LDRB     r0,[r4,#6]            ;337
0000d8  2620              MOVS     r6,#0x20              ;337
0000da  0740              LSLS     r0,r0,#29             ;337
0000dc  2800              CMP      r0,#0                 ;337
0000de  68d8              LDR      r0,[r3,#0xc]          ;337
0000e0  da01              BGE      |L11.230|
0000e2  4330              ORRS     r0,r0,r6              ;337
0000e4  e000              B        |L11.232|
                  |L11.230|
0000e6  43b0              BICS     r0,r0,r6              ;337
                  |L11.232|
0000e8  60d8              STR      r0,[r3,#0xc]          ;337
0000ea  79a0              LDRB     r0,[r4,#6]            ;338
0000ec  2610              MOVS     r6,#0x10              ;338
0000ee  0780              LSLS     r0,r0,#30             ;338
0000f0  2800              CMP      r0,#0                 ;338
0000f2  68d8              LDR      r0,[r3,#0xc]          ;338
0000f4  da01              BGE      |L11.250|
0000f6  4330              ORRS     r0,r0,r6              ;338
0000f8  e000              B        |L11.252|
                  |L11.250|
0000fa  43b0              BICS     r0,r0,r6              ;338
                  |L11.252|
0000fc  60d8              STR      r0,[r3,#0xc]          ;338
0000fe  68d8              LDR      r0,[r3,#0xc]          ;339
000100  2608              MOVS     r6,#8                 ;339
000102  43b0              BICS     r0,r0,r6              ;339
000104  79a6              LDRB     r6,[r4,#6]            ;339
000106  07f6              LSLS     r6,r6,#31             ;339
000108  0f36              LSRS     r6,r6,#28             ;339
00010a  4330              ORRS     r0,r0,r6              ;339
00010c  60d8              STR      r0,[r3,#0xc]          ;339
00010e  68d8              LDR      r0,[r3,#0xc]          ;341
000110  7926              LDRB     r6,[r4,#4]            ;341
000112  0880              LSRS     r0,r0,#2              ;341
000114  0080              LSLS     r0,r0,#2              ;341
000116  07b6              LSLS     r6,r6,#30             ;341
000118  0fb6              LSRS     r6,r6,#30             ;341
00011a  4330              ORRS     r0,r0,r6              ;341
00011c  60d8              STR      r0,[r3,#0xc]          ;341
00011e  68d8              LDR      r0,[r3,#0xc]          ;342
000120  4390              BICS     r0,r0,r2              ;342
000122  7962              LDRB     r2,[r4,#5]            ;342
000124  07d2              LSLS     r2,r2,#31             ;342
000126  0f52              LSRS     r2,r2,#29             ;342
000128  4310              ORRS     r0,r0,r2              ;342
00012a  60d8              STR      r0,[r3,#0xc]          ;342
00012c  6a18              LDR      r0,[r3,#0x20]         ;345
00012e  7a22              LDRB     r2,[r4,#8]            ;345
000130  0a00              LSRS     r0,r0,#8              ;345
000132  0200              LSLS     r0,r0,#8              ;345
000134  4310              ORRS     r0,r0,r2              ;345
000136  6218              STR      r0,[r3,#0x20]         ;345
000138  6808              LDR      r0,[r1,#0]            ;348
00013a  07c2              LSLS     r2,r0,#31             ;348
00013c  481d              LDR      r0,|L11.436|
00013e  d002              BEQ      |L11.326|
000140  694a              LDR      r2,[r1,#0x14]         ;349
000142  4382              BICS     r2,r2,r0              ;349
000144  e00e              B        |L11.356|
                  |L11.326|
000146  6a0a              LDR      r2,[r1,#0x20]         ;352
000148  03d2              LSLS     r2,r2,#15             ;352
00014a  d406              BMI      |L11.346|
00014c  694a              LDR      r2,[r1,#0x14]         ;353
00014e  4382              BICS     r2,r2,r0              ;353
000150  2001              MOVS     r0,#1                 ;353
000152  0600              LSLS     r0,r0,#24             ;353
000154  1810              ADDS     r0,r2,r0              ;353
000156  6148              STR      r0,[r1,#0x14]         ;353
000158  e005              B        |L11.358|
                  |L11.346|
00015a  680a              LDR      r2,[r1,#0]            ;355
00015c  0752              LSLS     r2,r2,#29             ;355
00015e  d518              BPL      |L11.402|
000160  694a              LDR      r2,[r1,#0x14]         ;356
000162  4302              ORRS     r2,r2,r0              ;356
                  |L11.356|
000164  614a              STR      r2,[r1,#0x14]         ;356
                  |L11.358|
000166  6988              LDR      r0,[r1,#0x18]         ;356
000168  0500              LSLS     r0,r0,#20             ;356
00016a  0f06              LSRS     r6,r0,#28             ;356
00016c  6948              LDR      r0,[r1,#0x14]         ;356
00016e  0180              LSLS     r0,r0,#6              ;356
000170  0f80              LSRS     r0,r0,#30             ;356
000172  d011              BEQ      |L11.408|
000174  6948              LDR      r0,[r1,#0x14]         ;356
000176  0180              LSLS     r0,r0,#6              ;356
000178  0f80              LSRS     r0,r0,#30             ;356
00017a  2801              CMP      r0,#1                 ;356
00017c  d00f              BEQ      |L11.414|
00017e  480e              LDR      r0,|L11.440|
                  |L11.384|
000180  1c71              ADDS     r1,r6,#1              ;356
000182  f7fffffe          BL       __aeabi_uidivmod
000186  462a              MOV      r2,r5                 ;362
000188  6821              LDR      r1,[r4,#0]            ;362
00018a  f7fffffe          BL       BaudRateCalculator
00018e  2000              MOVS     r0,#0                 ;365
000190  bd70              POP      {r4-r6,pc}
                  |L11.402|
000192  4805              LDR      r0,|L11.424|
000194  1d80              ADDS     r0,r0,#6              ;358
000196  bd70              POP      {r4-r6,pc}
                  |L11.408|
000198  f7fffffe          BL       DrvSYS_GetExtClockFreq
00019c  e7f0              B        |L11.384|
                  |L11.414|
00019e  f7fffffe          BL       DrvSYS_GetPLLClockFreq
0001a2  e7ed              B        |L11.384|
;;;367    
                          ENDP

                  |L11.420|
                          DCD      0x00100000
                  |L11.424|
                          DCD      0xffff9802
                  |L11.428|
                          DCD      0x50000200
                  |L11.432|
                          DCD      0x40050000
                  |L11.436|
                          DCD      0x03000000
                  |L11.440|
                          DCD      0x01518000

                          AREA ||i.DrvUART_Read||, CODE, READONLY, ALIGN=2

                  DrvUART_Read PROC
;;;631    /*---------------------------------------------------------------------------------------------------------*/
;;;632    int32_t DrvUART_Read(E_UART_PORT	u32Port,uint8_t	*pu8RxBuf, uint32_t	u32ReadBytes)
000000  b570              PUSH     {r4-r6,lr}
;;;633    {
;;;634        uint32_t  u32Count, u32delayno;
;;;635    
;;;636    	UART_T * tUART;
;;;637    
;;;638    	tUART = (UART_T *)((uint32_t)UART0 + u32Port);  
000002  4b0b              LDR      r3,|L12.48|
;;;639    
;;;640        for (u32Count=0; u32Count < u32ReadBytes; u32Count++)
;;;641        {
;;;642    		 u32delayno = 0;
;;;643    	     while (tUART->FSR.RX_EMPTY ==1)					    /* Check RX empty => failed */	   
;;;644    	     {
;;;645    	     	u32delayno++;        
;;;646    	        if ( u32delayno >= 0x40000000 )        
000004  2501              MOVS     r5,#1
000006  18c4              ADDS     r4,r0,r3              ;638
000008  2300              MOVS     r3,#0                 ;640
00000a  07ad              LSLS     r5,r5,#30
00000c  e00c              B        |L12.40|
                  |L12.14|
00000e  2000              MOVS     r0,#0                 ;642
000010  e004              B        |L12.28|
                  |L12.18|
000012  1c40              ADDS     r0,r0,#1              ;643
000014  42a8              CMP      r0,r5
000016  d301              BCC      |L12.28|
;;;647    	        	return E_DRVUART_ERR_TIMEOUT;               
000018  4806              LDR      r0,|L12.52|
;;;648             }
;;;649             pu8RxBuf[u32Count] = tUART->DATA;					    /* Get Data from UART RX  */
;;;650        }
;;;651    
;;;652        return E_SUCCESS;
;;;653    	
;;;654    }
00001a  bd70              POP      {r4-r6,pc}
                  |L12.28|
00001c  69a6              LDR      r6,[r4,#0x18]         ;643
00001e  0476              LSLS     r6,r6,#17             ;643
000020  d4f7              BMI      |L12.18|
000022  6820              LDR      r0,[r4,#0]            ;649
000024  54c8              STRB     r0,[r1,r3]            ;649
000026  1c5b              ADDS     r3,r3,#1              ;649
                  |L12.40|
000028  4293              CMP      r3,r2                 ;640
00002a  d3f0              BCC      |L12.14|
00002c  2000              MOVS     r0,#0                 ;652
00002e  bd70              POP      {r4-r6,pc}
;;;655    
                          ENDP

                  |L12.48|
                          DCD      0x40050000
                  |L12.52|
                          DCD      0xffff9801

                          AREA ||i.DrvUART_SetFnIRDA||, CODE, READONLY, ALIGN=2

                  DrvUART_SetFnIRDA PROC
;;;775    /*---------------------------------------------------------------------------------------------------------*/
;;;776    void DrvUART_SetFnIRDA(E_UART_PORT u32Port,STR_IRCR_T *str_IRCR )
000000  4a10              LDR      r2,|L13.68|
;;;777    {
;;;778    	UART_T * tUART;
;;;779    
;;;780    	tUART = (UART_T *)((uint32_t)UART0 + u32Port);  
000002  1880              ADDS     r0,r0,r2
;;;781    
;;;782    	tUART->FUNSEL.FUN_SEL 	= FUN_IRCR;							   	/* Enable IrDA function and configure */
000004  6b02              LDR      r2,[r0,#0x30]
000006  0892              LSRS     r2,r2,#2
000008  0092              LSLS     r2,r2,#2
00000a  1c92              ADDS     r2,r2,#2
00000c  6302              STR      r2,[r0,#0x30]
;;;783    	tUART->IRCR.TX_SELECT	= (str_IRCR->u8cTXSelect) ?1:0;
00000e  780a              LDRB     r2,[r1,#0]
000010  2302              MOVS     r3,#2
000012  2a00              CMP      r2,#0
000014  6a82              LDR      r2,[r0,#0x28]
000016  d001              BEQ      |L13.28|
000018  431a              ORRS     r2,r2,r3
00001a  e000              B        |L13.30|
                  |L13.28|
00001c  439a              BICS     r2,r2,r3
                  |L13.30|
00001e  6282              STR      r2,[r0,#0x28]
;;;784    	tUART->IRCR.INV_TX		= str_IRCR->u8cInvTX ;
000020  6a82              LDR      r2,[r0,#0x28]
000022  2320              MOVS     r3,#0x20
000024  439a              BICS     r2,r2,r3
000026  784b              LDRB     r3,[r1,#1]
000028  07db              LSLS     r3,r3,#31
00002a  0e9b              LSRS     r3,r3,#26
00002c  431a              ORRS     r2,r2,r3
00002e  6282              STR      r2,[r0,#0x28]
;;;785    	tUART->IRCR.INV_RX		= str_IRCR->u8cInvRX ;
000030  6a82              LDR      r2,[r0,#0x28]
000032  7889              LDRB     r1,[r1,#2]
000034  2340              MOVS     r3,#0x40
000036  07c9              LSLS     r1,r1,#31
000038  439a              BICS     r2,r2,r3
00003a  0e49              LSRS     r1,r1,#25
00003c  430a              ORRS     r2,r2,r1
00003e  6282              STR      r2,[r0,#0x28]
;;;786    }
000040  4770              BX       lr
;;;787    
                          ENDP

000042  0000              DCW      0x0000
                  |L13.68|
                          DCD      0x40050000

                          AREA ||i.DrvUART_SetFnLIN||, CODE, READONLY, ALIGN=2

                  DrvUART_SetFnLIN PROC
;;;801    /*---------------------------------------------------------------------------------------------------------*/
;;;802    void DrvUART_SetFnLIN(E_UART_PORT u32Port,uint16_t u16Mode,uint16_t u16BreakLength)
000000  4b0f              LDR      r3,|L14.64|
;;;803    {
;;;804    	UART_T * tUART;
;;;805    
;;;806    	tUART = (UART_T *)((uint32_t)UART0 + u32Port);  
000002  18c0              ADDS     r0,r0,r3
;;;807    
;;;808    	tUART->FUNSEL.FUN_SEL 	= FUN_LIN;
000004  6b03              LDR      r3,[r0,#0x30]
000006  089b              LSRS     r3,r3,#2
000008  009b              LSLS     r3,r3,#2
00000a  1c5b              ADDS     r3,r3,#1
00000c  6303              STR      r3,[r0,#0x30]
;;;809    	
;;;810    	tUART->ALTCON.LIN_BKFL  = u16BreakLength;
00000e  6ac3              LDR      r3,[r0,#0x2c]
000010  0712              LSLS     r2,r2,#28
000012  091b              LSRS     r3,r3,#4
000014  011b              LSLS     r3,r3,#4
000016  0f12              LSRS     r2,r2,#28
000018  4313              ORRS     r3,r3,r2
00001a  62c3              STR      r3,[r0,#0x2c]
;;;811    	tUART->ALTCON.LIN_TX_EN	= (u16Mode & MODE_TX) ?1:0;
00001c  6ac2              LDR      r2,[r0,#0x2c]
00001e  2380              MOVS     r3,#0x80
000020  439a              BICS     r2,r2,r3
000022  07cb              LSLS     r3,r1,#31
000024  0e1b              LSRS     r3,r3,#24
000026  431a              ORRS     r2,r2,r3
000028  62c2              STR      r2,[r0,#0x2c]
;;;812    	tUART->ALTCON.LIN_RX_EN	= (u16Mode & MODE_RX) ?1:0;
00002a  0789              LSLS     r1,r1,#30
00002c  2240              MOVS     r2,#0x40
00002e  2900              CMP      r1,#0
000030  6ac1              LDR      r1,[r0,#0x2c]
000032  da01              BGE      |L14.56|
000034  4311              ORRS     r1,r1,r2
000036  e000              B        |L14.58|
                  |L14.56|
000038  4391              BICS     r1,r1,r2
                  |L14.58|
00003a  62c1              STR      r1,[r0,#0x2c]
;;;813    
;;;814    }
00003c  4770              BX       lr
;;;815    
                          ENDP

00003e  0000              DCW      0x0000
                  |L14.64|
                          DCD      0x40050000

                          AREA ||i.DrvUART_SetFnRS485||, CODE, READONLY, ALIGN=2

                  DrvUART_SetFnRS485 PROC
;;;835    /*---------------------------------------------------------------------------------------------------------*/
;;;836    void DrvUART_SetFnRS485(E_UART_PORT u32Port,STR_RS485_T *str_RS485)
000000  4a21              LDR      r2,|L15.136|
;;;837    {
000002  b510              PUSH     {r4,lr}
;;;838    					 
;;;839    	UART_T * tUART;
;;;840    
;;;841    	tUART = (UART_T *)((uint32_t)UART0 + u32Port);  
000004  1880              ADDS     r0,r0,r2
;;;842    
;;;843    	tUART->FUNSEL.FUN_SEL 			= FUN_RS485;					
000006  6b02              LDR      r2,[r0,#0x30]
000008  2303              MOVS     r3,#3
00000a  431a              ORRS     r2,r2,r3
00000c  6302              STR      r2,[r0,#0x30]
;;;844    	tUART->ALTCON.RS485_ADD_EN	    = (str_RS485-> u8cAddrEnable) ?1:0;
00000e  784a              LDRB     r2,[r1,#1]
000010  2301              MOVS     r3,#1
000012  03db              LSLS     r3,r3,#15
000014  2a00              CMP      r2,#0
000016  6ac2              LDR      r2,[r0,#0x2c]
000018  d001              BEQ      |L15.30|
00001a  431a              ORRS     r2,r2,r3
00001c  e000              B        |L15.32|
                  |L15.30|
00001e  439a              BICS     r2,r2,r3
                  |L15.32|
000020  62c2              STR      r2,[r0,#0x2c]
;;;845    	tUART->ALTCON.ADDR_MATCH		= str_RS485-> u8cAddrValue ;
000022  6ac2              LDR      r2,[r0,#0x2c]
000024  788b              LDRB     r3,[r1,#2]
000026  0212              LSLS     r2,r2,#8
000028  0a12              LSRS     r2,r2,#8
00002a  061b              LSLS     r3,r3,#24
00002c  431a              ORRS     r2,r2,r3
00002e  62c2              STR      r2,[r0,#0x2c]
;;;846    	tUART->ALTCON.RS485_NMM		    = (str_RS485-> u8cModeSelect & MODE_RS485_NMM)?1:0;	
000030  6ac2              LDR      r2,[r0,#0x2c]
000032  23ff              MOVS     r3,#0xff
000034  780c              LDRB     r4,[r1,#0]
000036  3301              ADDS     r3,#1
000038  07e4              LSLS     r4,r4,#31
00003a  439a              BICS     r2,r2,r3
00003c  0de4              LSRS     r4,r4,#23
00003e  4322              ORRS     r2,r2,r4
000040  62c2              STR      r2,[r0,#0x2c]
;;;847    	tUART->ALTCON.RS485_AAD		    = (str_RS485-> u8cModeSelect & MODE_RS485_AAD)?1:0;	
000042  780a              LDRB     r2,[r1,#0]
000044  4c11              LDR      r4,|L15.140|
000046  0792              LSLS     r2,r2,#30
000048  6ac2              LDR      r2,[r0,#0x2c]
00004a  d501              BPL      |L15.80|
00004c  4322              ORRS     r2,r2,r4
00004e  e000              B        |L15.82|
                  |L15.80|
000050  43a2              BICS     r2,r2,r4
                  |L15.82|
000052  62c2              STR      r2,[r0,#0x2c]
;;;848    	tUART->ALTCON.RS485_AUD		    = (str_RS485-> u8cModeSelect & MODE_RS485_AUD)?1:0;	
000054  780a              LDRB     r2,[r1,#0]
000056  4c0e              LDR      r4,|L15.144|
000058  0752              LSLS     r2,r2,#29
00005a  6ac2              LDR      r2,[r0,#0x2c]
00005c  d501              BPL      |L15.98|
00005e  4322              ORRS     r2,r2,r4
000060  e000              B        |L15.100|
                  |L15.98|
000062  43a2              BICS     r2,r2,r4
                  |L15.100|
000064  62c2              STR      r2,[r0,#0x2c]
;;;849    	tUART->TOR.DLY                  = str_RS485-> u8cDelayTime;
000066  6a02              LDR      r2,[r0,#0x20]
000068  24ff              MOVS     r4,#0xff
00006a  0224              LSLS     r4,r4,#8
00006c  43a2              BICS     r2,r2,r4
00006e  78cc              LDRB     r4,[r1,#3]
000070  0224              LSLS     r4,r4,#8
000072  4322              ORRS     r2,r2,r4
000074  6202              STR      r2,[r0,#0x20]
;;;850    	tUART->FCR.RX_DIS               = (str_RS485-> u8cRxDisable) ?1:0;
000076  7909              LDRB     r1,[r1,#4]
000078  2900              CMP      r1,#0
00007a  6881              LDR      r1,[r0,#8]
00007c  d001              BEQ      |L15.130|
00007e  4319              ORRS     r1,r1,r3
000080  e000              B        |L15.132|
                  |L15.130|
000082  4399              BICS     r1,r1,r3
                  |L15.132|
000084  6081              STR      r1,[r0,#8]
;;;851    	
;;;852    
;;;853    } 
000086  bd10              POP      {r4,pc}
;;;854    /*---------------------------------------------------------------------------------------------------------*/
                          ENDP

                  |L15.136|
                          DCD      0x40050000
                  |L15.140|
                          DCD      0x00000200
                  |L15.144|
                          DCD      0x00000400

                          AREA ||i.DrvUART_SetRTS||, CODE, READONLY, ALIGN=2

                  DrvUART_SetRTS PROC
;;;184    /*---------------------------------------------------------------------------------------------------------*/
;;;185    void DrvUART_SetRTS(E_UART_PORT u32Port,uint8_t u8Value,uint16_t u16TriggerLevel)
000000  4b09              LDR      r3,|L16.40|
;;;186    {
000002  b510              PUSH     {r4,lr}
;;;187    	
;;;188    	UART_T * tUART;
;;;189    
;;;190    	tUART = (UART_T *)((uint32_t)UART0 + u32Port);  
000004  18c0              ADDS     r0,r0,r3
;;;191    
;;;192    	tUART->MCR.RTS = u8Value;
000006  6903              LDR      r3,[r0,#0x10]
000008  2402              MOVS     r4,#2
00000a  07c9              LSLS     r1,r1,#31
00000c  43a3              BICS     r3,r3,r4
00000e  0f89              LSRS     r1,r1,#30
000010  430b              ORRS     r3,r3,r1
000012  6103              STR      r3,[r0,#0x10]
;;;193    
;;;194    	tUART->FCR.RTS_TRI_LEV = u16TriggerLevel;
000014  6881              LDR      r1,[r0,#8]
000016  230f              MOVS     r3,#0xf
000018  041b              LSLS     r3,r3,#16
00001a  0712              LSLS     r2,r2,#28
00001c  4399              BICS     r1,r1,r3
00001e  0b12              LSRS     r2,r2,#12
000020  4311              ORRS     r1,r1,r2
000022  6081              STR      r1,[r0,#8]
;;;195    }	
000024  bd10              POP      {r4,pc}
;;;196    
                          ENDP

000026  0000              DCW      0x0000
                  |L16.40|
                          DCD      0x40050000

                          AREA ||i.DrvUART_Write||, CODE, READONLY, ALIGN=2

                  DrvUART_Write PROC
;;;672    /*---------------------------------------------------------------------------------------------------------*/
;;;673    int32_t DrvUART_Write(E_UART_PORT	u32Port,uint8_t	*pu8TxBuf, 	uint32_t u32WriteBytes)
000000  b570              PUSH     {r4-r6,lr}
;;;674    {
;;;675        uint32_t  u32Count, u32delayno;
;;;676    
;;;677    	UART_T * tUART;
;;;678    
;;;679    	tUART = (UART_T *)((uint32_t)UART0 + u32Port);  
000002  4b0b              LDR      r3,|L17.48|
;;;680    
;;;681        for (u32Count=0; u32Count<u32WriteBytes; u32Count++)
;;;682        {
;;;683           u32delayno = 0;
;;;684    	   while (tUART->FSR.TE_FLAG !=1)						    	/* Wait Tx empty and Time-out manner */
;;;685           {
;;;686           	    u32delayno++;
;;;687           	    if ( u32delayno >= 0x40000000 )     	    
000004  2501              MOVS     r5,#1
000006  18c4              ADDS     r4,r0,r3              ;679
000008  2300              MOVS     r3,#0                 ;681
00000a  07ad              LSLS     r5,r5,#30
00000c  e00c              B        |L17.40|
                  |L17.14|
00000e  2000              MOVS     r0,#0                 ;683
000010  e004              B        |L17.28|
                  |L17.18|
000012  1c40              ADDS     r0,r0,#1              ;684
000014  42a8              CMP      r0,r5
000016  d301              BCC      |L17.28|
;;;688           	       return E_DRVUART_ERR_TIMEOUT;     	       
000018  4806              LDR      r0,|L17.52|
;;;689    				   
;;;690           }
;;;691    	   tUART->DATA = pu8TxBuf[u32Count];						/* Send UART Data from buffer */
;;;692        }
;;;693    
;;;694        return E_SUCCESS;
;;;695    	
;;;696      
;;;697    }
00001a  bd70              POP      {r4-r6,pc}
                  |L17.28|
00001c  69a6              LDR      r6,[r4,#0x18]         ;684
00001e  00f6              LSLS     r6,r6,#3              ;684
000020  d5f7              BPL      |L17.18|
000022  5cc8              LDRB     r0,[r1,r3]            ;691
000024  6020              STR      r0,[r4,#0]            ;691
000026  1c5b              ADDS     r3,r3,#1              ;691
                  |L17.40|
000028  4293              CMP      r3,r2                 ;681
00002a  d3f0              BCC      |L17.14|
00002c  2000              MOVS     r0,#0                 ;694
00002e  bd70              POP      {r4-r6,pc}
;;;698    
                          ENDP

                  |L17.48|
                          DCD      0x40050000
                  |L17.52|
                          DCD      0xffff9801

                          AREA ||i.NVIC_DisableIRQ||, CODE, READONLY, ALIGN=2

                  NVIC_DisableIRQ PROC
;;;809     */
;;;810    static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
000000  06c1              LSLS     r1,r0,#27
;;;811    {
;;;812      NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
000002  0ec9              LSRS     r1,r1,#27
000004  2001              MOVS     r0,#1
000006  4088              LSLS     r0,r0,r1
000008  4901              LDR      r1,|L18.16|
00000a  6008              STR      r0,[r1,#0]
;;;813    }
00000c  4770              BX       lr
;;;814    
                          ENDP

00000e  0000              DCW      0x0000
                  |L18.16|
                          DCD      0xe000e180

                          AREA ||i.UART02_IRQHandler||, CODE, READONLY, ALIGN=2

                  UART02_IRQHandler PROC
;;;32     /*---------------------------------------------------------------------------------------------------------*/
;;;33     void UART02_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;34     {
;;;35         uint32_t u32uart0IntStatus,u32uart2IntStatus;
;;;36     
;;;37         u32uart0IntStatus = inpw(&UART0->ISR) ;
000002  4807              LDR      r0,|L19.32|
000004  69c0              LDR      r0,[r0,#0x1c]
;;;38     	
;;;39     	u32uart2IntStatus = inpw(&UART2->ISR) ;
000006  4907              LDR      r1,|L19.36|
000008  69cc              LDR      r4,[r1,#0x1c]
;;;40     	
;;;41         if(g_pfnUART0callback != NULL)
00000a  4d07              LDR      r5,|L19.40|
00000c  6829              LDR      r1,[r5,#0]  ; g_pfnUART0callback
00000e  2900              CMP      r1,#0
000010  d000              BEQ      |L19.20|
;;;42     	{
;;;43             g_pfnUART0callback(u32uart0IntStatus);
000012  4788              BLX      r1
                  |L19.20|
;;;44         }
;;;45     	if(g_pfnUART2callback != NULL)
000014  68a9              LDR      r1,[r5,#8]  ; g_pfnUART2callback
000016  2900              CMP      r1,#0
000018  d001              BEQ      |L19.30|
;;;46         {
;;;47             g_pfnUART2callback(u32uart2IntStatus);
00001a  4620              MOV      r0,r4
00001c  4788              BLX      r1
                  |L19.30|
;;;48         }
;;;49     }
00001e  bd70              POP      {r4-r6,pc}
;;;50     
                          ENDP

                  |L19.32|
                          DCD      0x40050000
                  |L19.36|
                          DCD      0x40154000
                  |L19.40|
                          DCD      ||.data||

                          AREA ||i.UART1_IRQHandler||, CODE, READONLY, ALIGN=2

                  UART1_IRQHandler PROC
;;;51     
;;;52     void UART1_IRQHandler(void)
000000  4803              LDR      r0,|L20.16|
;;;53     {
;;;54         uint32_t u32IntStatus;
;;;55     
;;;56     	u32IntStatus = inpw(&UART1->ISR) ;
000002  69c0              LDR      r0,[r0,#0x1c]
;;;57     
;;;58         if(g_pfnUART1callback != NULL)
000004  4903              LDR      r1,|L20.20|
000006  6849              LDR      r1,[r1,#4]  ; g_pfnUART1callback
000008  2900              CMP      r1,#0
00000a  d000              BEQ      |L20.14|
;;;59         {
;;;60            g_pfnUART1callback(u32IntStatus);
00000c  4708              BX       r1
                  |L20.14|
;;;61         }
;;;62     
;;;63     }
00000e  4770              BX       lr
;;;64     
                          ENDP

                  |L20.16|
                          DCD      0x40150000
                  |L20.20|
                          DCD      ||.data||

                          AREA ||.data||, DATA, ALIGN=2

                  g_pfnUART0callback
                          DCD      0x00000000
                  g_pfnUART1callback
                          DCD      0x00000000
                  g_pfnUART2callback
                          DCD      0x00000000
