; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\drvsys.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\drvsys.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\Template -I..\NUC140BSP\CMSIS\CM0\DeviceSupport\Nuvoton\NUC1xx -I..\NUC140BSP\NuvotonPlatform_Keil\Include -I..\NUC140BSP\NuvotonPlatform_Keil\Include\Driver -I..\NUC140BSP\CMSIS\CM0\CoreSupport -I..\NUC140BSP\NuvotonPlatform_Keil\Include\NUC1xx-LB_002 -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\CMSIS\Include -ID:\Keil_v5\ARM\Inc\ST\STM32F10x -D__UVISION_VERSION=517 --omf_browse=.\obj\drvsys.crf ..\NUC140BSP\NuvotonPlatform_Keil\Src\Driver\DrvSYS.c]
                          THUMB

                          AREA ||i.BOD_IRQHandler||, CODE, READONLY, ALIGN=2

                  BOD_IRQHandler PROC
;;;511    /*---------------------------------------------------------------------------------------------------------*/
;;;512    void BOD_IRQHandler(void)
000000  2005              MOVS     r0,#5
;;;513    {
;;;514        SYS->BODCR.BOD_INTF = 1;
000002  0700              LSLS     r0,r0,#28
000004  6981              LDR      r1,[r0,#0x18]
000006  2210              MOVS     r2,#0x10
000008  4311              ORRS     r1,r1,r2
00000a  6181              STR      r1,[r0,#0x18]
;;;515        if (BOD_callbackFn != NULL)
00000c  4802              LDR      r0,|L1.24|
00000e  6800              LDR      r0,[r0,#0]  ; BOD_callbackFn
000010  2800              CMP      r0,#0
000012  d000              BEQ      |L1.22|
;;;516            BOD_callbackFn();
000014  4700              BX       r0
                  |L1.22|
;;;517    }
000016  4770              BX       lr
;;;518    
                          ENDP

                  |L1.24|
                          DCD      ||.data||

                          AREA ||i.DrvSYS_ClearClockSwitchStatus||, CODE, READONLY, ALIGN=2

                  DrvSYS_ClearClockSwitchStatus PROC
;;;1403   /*---------------------------------------------------------------------------------------------------------*/
;;;1404   void DrvSYS_ClearClockSwitchStatus(void)
000000  4802              LDR      r0,|L2.12|
;;;1405   {
;;;1406        SYSCLK->CLKSTATUS.CLK_SW_FAIL = 1;
000002  68c1              LDR      r1,[r0,#0xc]
000004  2280              MOVS     r2,#0x80
000006  4311              ORRS     r1,r1,r2
000008  60c1              STR      r1,[r0,#0xc]
;;;1407   }
00000a  4770              BX       lr
;;;1408   
                          ENDP

                  |L2.12|
                          DCD      0x50000200

                          AREA ||i.DrvSYS_ClearResetSource||, CODE, READONLY, ALIGN=1

                  DrvSYS_ClearResetSource PROC
;;;145    /*---------------------------------------------------------------------------------------------------------*/
;;;146    uint32_t DrvSYS_ClearResetSource(uint32_t u32Src)
000000  2105              MOVS     r1,#5
;;;147    {
;;;148        *((__IO uint32_t *) &SYS->RSTSRC) = u32Src;
000002  0709              LSLS     r1,r1,#28
000004  6048              STR      r0,[r1,#4]
;;;149        return 0;
000006  2000              MOVS     r0,#0
;;;150    }
000008  4770              BX       lr
;;;151    
                          ENDP


                          AREA ||i.DrvSYS_Delay||, CODE, READONLY, ALIGN=2

                  DrvSYS_Delay PROC
;;;1309   /*---------------------------------------------------------------------------------------------------------*/
;;;1310   void DrvSYS_Delay(uint32_t us)
000000  4906              LDR      r1,|L4.28|
;;;1311   {
;;;1312       SysTick->LOAD = us * CyclesPerUs;
000002  6809              LDR      r1,[r1,#0]  ; CyclesPerUs
000004  4348              MULS     r0,r1,r0
000006  4906              LDR      r1,|L4.32|
000008  6148              STR      r0,[r1,#0x14]
;;;1313       SysTick->VAL  = (0x00);
00000a  2000              MOVS     r0,#0
00000c  6188              STR      r0,[r1,#0x18]
;;;1314       SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
00000e  2005              MOVS     r0,#5
000010  6108              STR      r0,[r1,#0x10]
                  |L4.18|
;;;1315   
;;;1316       /* Waiting for down-count to zero */
;;;1317       while((SysTick->CTRL & (1 << 16)) == 0);
000012  6908              LDR      r0,[r1,#0x10]
000014  03c0              LSLS     r0,r0,#15
000016  d5fc              BPL      |L4.18|
;;;1318   }
000018  4770              BX       lr
;;;1319   
                          ENDP

00001a  0000              DCW      0x0000
                  |L4.28|
                          DCD      CyclesPerUs
                  |L4.32|
                          DCD      0xe000e000

                          AREA ||i.DrvSYS_DisableBODLowPowerMode||, CODE, READONLY, ALIGN=1

                  DrvSYS_DisableBODLowPowerMode PROC
;;;349    /*---------------------------------------------------------------------------------------------------------*/
;;;350    void DrvSYS_DisableBODLowPowerMode(void)
000000  2005              MOVS     r0,#5
;;;351    {
;;;352        SYS->BODCR.BOD_LPM = 0;
000002  0700              LSLS     r0,r0,#28
000004  6981              LDR      r1,[r0,#0x18]
000006  2220              MOVS     r2,#0x20
000008  4391              BICS     r1,r1,r2
00000a  6181              STR      r1,[r0,#0x18]
;;;353    }
00000c  4770              BX       lr
;;;354    
                          ENDP


                          AREA ||i.DrvSYS_DisableHighPerformanceMode||, CODE, READONLY, ALIGN=1

                  DrvSYS_DisableHighPerformanceMode PROC
;;;1291   /*---------------------------------------------------------------------------------------------------------*/
;;;1292   void DrvSYS_DisableHighPerformanceMode(void)
000000  2005              MOVS     r0,#5
;;;1293   {   
;;;1294       SYS->CPR.HPE = 0;
000002  0700              LSLS     r0,r0,#28
000004  6901              LDR      r1,[r0,#0x10]
000006  0849              LSRS     r1,r1,#1
000008  0049              LSLS     r1,r1,#1
00000a  6101              STR      r1,[r0,#0x10]
;;;1295   }
00000c  4770              BX       lr
;;;1296   
                          ENDP


                          AREA ||i.DrvSYS_DisableLowVoltReset||, CODE, READONLY, ALIGN=1

                  DrvSYS_DisableLowVoltReset PROC
;;;413    /*---------------------------------------------------------------------------------------------------------*/
;;;414    void DrvSYS_DisableLowVoltReset(void)
000000  2005              MOVS     r0,#5
;;;415    {
;;;416        SYS->BODCR.LVR_EN = 0;
000002  0700              LSLS     r0,r0,#28
000004  6981              LDR      r1,[r0,#0x18]
000006  2280              MOVS     r2,#0x80
000008  4391              BICS     r1,r1,r2
00000a  6181              STR      r1,[r0,#0x18]
;;;417    }
00000c  4770              BX       lr
;;;418    
                          ENDP


                          AREA ||i.DrvSYS_DisablePOR||, CODE, READONLY, ALIGN=2

                  DrvSYS_DisablePOR PROC
;;;493    /*---------------------------------------------------------------------------------------------------------*/
;;;494    void DrvSYS_DisablePOR(void)
000000  4801              LDR      r0,|L8.8|
;;;495    {
;;;496        SYS->PORCR = 0x5AA5;
000002  0701              LSLS     r1,r0,#28
000004  6248              STR      r0,[r1,#0x24]
;;;497    }
000006  4770              BX       lr
;;;498    
                          ENDP

                  |L8.8|
                          DCD      0x00005aa5

                          AREA ||i.DrvSYS_DisableTemperatureSensor||, CODE, READONLY, ALIGN=1

                  DrvSYS_DisableTemperatureSensor PROC
;;;447    /*---------------------------------------------------------------------------------------------------------*/
;;;448    void DrvSYS_DisableTemperatureSensor(void)
000000  2005              MOVS     r0,#5
;;;449    {
;;;450        SYS->TEMPCR.VTEMP_EN = 0;
000002  0700              LSLS     r0,r0,#28
000004  69c1              LDR      r1,[r0,#0x1c]
000006  0849              LSRS     r1,r1,#1
000008  0049              LSLS     r1,r1,#1
00000a  61c1              STR      r1,[r0,#0x1c]
;;;451    }
00000c  4770              BX       lr
;;;452    
                          ENDP


                          AREA ||i.DrvSYS_EnableBODLowPowerMode||, CODE, READONLY, ALIGN=1

                  DrvSYS_EnableBODLowPowerMode PROC
;;;326    /*---------------------------------------------------------------------------------------------------------*/
;;;327    void DrvSYS_EnableBODLowPowerMode(void)
000000  2005              MOVS     r0,#5
;;;328    {
;;;329        SYS->BODCR.BOD_LPM = 1;
000002  0700              LSLS     r0,r0,#28
000004  6981              LDR      r1,[r0,#0x18]
000006  2220              MOVS     r2,#0x20
000008  4311              ORRS     r1,r1,r2
00000a  6181              STR      r1,[r0,#0x18]
;;;330    }
00000c  4770              BX       lr
;;;331    
                          ENDP


                          AREA ||i.DrvSYS_EnableHighPerformanceMode||, CODE, READONLY, ALIGN=1

                  DrvSYS_EnableHighPerformanceMode PROC
;;;1266   /*---------------------------------------------------------------------------------------------------------*/
;;;1267   void DrvSYS_EnableHighPerformanceMode(void)
000000  2005              MOVS     r0,#5
;;;1268   {   
;;;1269       SYS->CPR.HPE = 1;
000002  0700              LSLS     r0,r0,#28
000004  6901              LDR      r1,[r0,#0x10]
000006  2201              MOVS     r2,#1
000008  4311              ORRS     r1,r1,r2
00000a  6101              STR      r1,[r0,#0x10]
;;;1270   }
00000c  4770              BX       lr
;;;1271   
                          ENDP


                          AREA ||i.DrvSYS_EnableLowVoltReset||, CODE, READONLY, ALIGN=1

                  DrvSYS_EnableLowVoltReset PROC
;;;390    /*---------------------------------------------------------------------------------------------------------*/
;;;391    void DrvSYS_EnableLowVoltReset(void)
000000  2005              MOVS     r0,#5
;;;392    {
;;;393        SYS->BODCR.LVR_EN = 1;
000002  0700              LSLS     r0,r0,#28
000004  6981              LDR      r1,[r0,#0x18]
000006  2280              MOVS     r2,#0x80
000008  4311              ORRS     r1,r1,r2
00000a  6181              STR      r1,[r0,#0x18]
;;;394    }
00000c  4770              BX       lr
;;;395    
                          ENDP


                          AREA ||i.DrvSYS_EnablePOR||, CODE, READONLY, ALIGN=1

                  DrvSYS_EnablePOR PROC
;;;470    /*---------------------------------------------------------------------------------------------------------*/
;;;471    void DrvSYS_EnablePOR(void)
000000  2000              MOVS     r0,#0
;;;472    {
;;;473        SYS->PORCR = 0;
000002  2105              MOVS     r1,#5
000004  0709              LSLS     r1,r1,#28
000006  6248              STR      r0,[r1,#0x24]
;;;474    }
000008  4770              BX       lr
;;;475    
                          ENDP


                          AREA ||i.DrvSYS_EnableTemperatureSensor||, CODE, READONLY, ALIGN=1

                  DrvSYS_EnableTemperatureSensor PROC
;;;430    /*---------------------------------------------------------------------------------------------------------*/
;;;431    void DrvSYS_EnableTemperatureSensor(void)
000000  2005              MOVS     r0,#5
;;;432    {
;;;433        SYS->TEMPCR.VTEMP_EN = 1;
000002  0700              LSLS     r0,r0,#28
000004  69c1              LDR      r1,[r0,#0x1c]
000006  2201              MOVS     r2,#1
000008  4311              ORRS     r1,r1,r2
00000a  61c1              STR      r1,[r0,#0x1c]
;;;434    }
00000c  4770              BX       lr
;;;435    
                          ENDP


                          AREA ||i.DrvSYS_EnterPowerDown||, CODE, READONLY, ALIGN=2

                  DrvSYS_EnterPowerDown PROC
;;;912    /*---------------------------------------------------------------------------------------------------------*/
;;;913    void DrvSYS_EnterPowerDown(E_SYS_PD_TYPE ePDType)
000000  b510              PUSH     {r4,lr}
;;;914    {   
;;;915        SYSCLK->PWRCON.PWR_DOWN_EN = 0;
000002  4908              LDR      r1,|L15.36|
000004  680b              LDR      r3,[r1,#0]
000006  2280              MOVS     r2,#0x80
000008  4393              BICS     r3,r3,r2
00000a  600b              STR      r3,[r1,#0]
;;;916        SYSCLK->PWRCON.PD_WAIT_CPU = ePDType;
00000c  680b              LDR      r3,[r1,#0]
00000e  0054              LSLS     r4,r2,#1
000010  07c0              LSLS     r0,r0,#31
000012  43a3              BICS     r3,r3,r4
000014  0dc0              LSRS     r0,r0,#23
000016  4303              ORRS     r3,r3,r0
000018  600b              STR      r3,[r1,#0]
;;;917        SYSCLK->PWRCON.PWR_DOWN_EN = 1;
00001a  6808              LDR      r0,[r1,#0]
00001c  4310              ORRS     r0,r0,r2
00001e  6008              STR      r0,[r1,#0]
;;;918    }
000020  bd10              POP      {r4,pc}
;;;919    
                          ENDP

000022  0000              DCW      0x0000
                  |L15.36|
                          DCD      0x50000200

                          AREA ||i.DrvSYS_GetBODState||, CODE, READONLY, ALIGN=1

                  DrvSYS_GetBODState PROC
;;;367    /*---------------------------------------------------------------------------------------------------------*/
;;;368    uint32_t DrvSYS_GetBODState(void)
000000  2005              MOVS     r0,#5
;;;369    {
;;;370        return SYS->BODCR.BOD_OUT;
000002  0700              LSLS     r0,r0,#28
000004  6980              LDR      r0,[r0,#0x18]
000006  0640              LSLS     r0,r0,#25
000008  0fc0              LSRS     r0,r0,#31
;;;371    }
00000a  4770              BX       lr
;;;372    
                          ENDP


                          AREA ||i.DrvSYS_GetChipClockSourceStatus||, CODE, READONLY, ALIGN=2

                  DrvSYS_GetChipClockSourceStatus PROC
;;;1337   /*---------------------------------------------------------------------------------------------------------*/
;;;1338   int32_t DrvSYS_GetChipClockSourceStatus(E_SYS_CHIP_CLKSRC eClkSrc)
000000  b500              PUSH     {lr}
;;;1339   {
;;;1340       int32_t status;
;;;1341   
;;;1342       switch(eClkSrc)
;;;1343       {
;;;1344           case E_SYS_XTL12M:  
;;;1345               status = SYSCLK->CLKSTATUS.XTL12M_STB;
000002  490d              LDR      r1,|L17.56|
000004  0003              MOVS     r3,r0                 ;1342
000006  f7fffffe          BL       __ARM_common_switch8
00000a  0504              DCB      0x05,0x04
00000c  080b0e11          DCB      0x08,0x0b,0x0e,0x11
000010  1500              DCB      0x15,0x00
000012  68c8              LDR      r0,[r1,#0xc]
000014  07c0              LSLS     r0,r0,#31
000016  0fc0              LSRS     r0,r0,#31
;;;1346               break;
;;;1347           case E_SYS_XTL32K:
;;;1348               status = SYSCLK->CLKSTATUS.XTL32K_STB;
;;;1349               break;
;;;1350           case E_SYS_OSC22M:
;;;1351               status = SYSCLK->CLKSTATUS.OSC22M_STB;
;;;1352               break;
;;;1353           case E_SYS_OSC10K:
;;;1354               status = SYSCLK->CLKSTATUS.OSC10K_STB;
;;;1355               break;
;;;1356           case E_SYS_PLL:
;;;1357               status = SYSCLK->CLKSTATUS.PLL_STB;
;;;1358               break;
;;;1359           default:
;;;1360               return E_DRVSYS_ERR_ARGUMENT;
;;;1361       }
;;;1362   
;;;1363       return status;
;;;1364   }
000018  bd00              POP      {pc}
00001a  68c8              LDR      r0,[r1,#0xc]          ;1348
00001c  0780              LSLS     r0,r0,#30             ;1348
00001e  e007              B        |L17.48|
000020  68c8              LDR      r0,[r1,#0xc]          ;1351
000022  06c0              LSLS     r0,r0,#27             ;1351
000024  e004              B        |L17.48|
000026  68c8              LDR      r0,[r1,#0xc]          ;1354
000028  0700              LSLS     r0,r0,#28             ;1354
00002a  e001              B        |L17.48|
00002c  68c8              LDR      r0,[r1,#0xc]          ;1357
00002e  0740              LSLS     r0,r0,#29             ;1357
                  |L17.48|
000030  0fc0              LSRS     r0,r0,#31             ;1357
000032  bd00              POP      {pc}
000034  4801              LDR      r0,|L17.60|
000036  bd00              POP      {pc}
;;;1365   
                          ENDP

                  |L17.56|
                          DCD      0x50000200
                  |L17.60|
                          DCD      0xffff9603

                          AREA ||i.DrvSYS_GetClockSwitchStatus||, CODE, READONLY, ALIGN=2

                  DrvSYS_GetClockSwitchStatus PROC
;;;1383   /*---------------------------------------------------------------------------------------------------------*/
;;;1384   uint32_t DrvSYS_GetClockSwitchStatus(void)
000000  4802              LDR      r0,|L18.12|
;;;1385   {   
;;;1386       return SYSCLK->CLKSTATUS.CLK_SW_FAIL;
000002  68c0              LDR      r0,[r0,#0xc]
000004  0600              LSLS     r0,r0,#24
000006  0fc0              LSRS     r0,r0,#31
;;;1387   }
000008  4770              BX       lr
;;;1388   
                          ENDP

00000a  0000              DCW      0x0000
                  |L18.12|
                          DCD      0x50000200

                          AREA ||i.DrvSYS_GetExtClockFreq||, CODE, READONLY, ALIGN=2

                  DrvSYS_GetExtClockFreq PROC
;;;968    /*---------------------------------------------------------------------------------------------------------*/
;;;969    uint32_t DrvSYS_GetExtClockFreq(void)
000000  4800              LDR      r0,|L19.4|
;;;970    {   
;;;971        return __XTAL;
;;;972    }
000002  4770              BX       lr
;;;973    
                          ENDP

                  |L19.4|
                          DCD      0x00b71b00

                          AREA ||i.DrvSYS_GetHCLKFreq||, CODE, READONLY, ALIGN=2

                  DrvSYS_GetHCLKFreq PROC
;;;1111   /*---------------------------------------------------------------------------------------------------------*/
;;;1112   uint32_t DrvSYS_GetHCLKFreq(void)
000000  b510              PUSH     {r4,lr}
;;;1113   {
;;;1114       
;;;1115       uint32_t u32Freqout = 0, u32AHBDivider;
;;;1116   
;;;1117       if (SYSCLK->CLKSEL0.HCLK_S == 0)        /* external 12MHz crystal clock */
000002  4c12              LDR      r4,|L20.76|
000004  6920              LDR      r0,[r4,#0x10]
000006  0740              LSLS     r0,r0,#29
000008  d016              BEQ      |L20.56|
;;;1118       {
;;;1119           u32Freqout = __XTAL;    
;;;1120       }
;;;1121       else if(SYSCLK->CLKSEL0.HCLK_S == 1)    /* external 32KHz crystal clock */ 
00000a  6920              LDR      r0,[r4,#0x10]
00000c  0740              LSLS     r0,r0,#29
00000e  0f40              LSRS     r0,r0,#29
000010  2801              CMP      r0,#1
000012  d013              BEQ      |L20.60|
;;;1122       {
;;;1123           u32Freqout = __RTC_XTAL;
;;;1124       }
;;;1125       else if(SYSCLK->CLKSEL0.HCLK_S == 2)    /* PLL clock */
000014  6920              LDR      r0,[r4,#0x10]
000016  0740              LSLS     r0,r0,#29
000018  0f40              LSRS     r0,r0,#29
00001a  2802              CMP      r0,#2
00001c  d011              BEQ      |L20.66|
;;;1126       {
;;;1127           u32Freqout = DrvSYS_GetPLLClockFreq();
;;;1128       }
;;;1129       else if(SYSCLK->CLKSEL0.HCLK_S == 3)    /* internal 10KHz oscillator clock */
00001e  6920              LDR      r0,[r4,#0x10]
000020  0740              LSLS     r0,r0,#29
000022  0f40              LSRS     r0,r0,#29
000024  2803              CMP      r0,#3
000026  d00f              BEQ      |L20.72|
;;;1130       {
;;;1131           u32Freqout = __IRC10K;
;;;1132       }
;;;1133       else                                    /* internal 22MHz oscillator clock */
;;;1134       {
;;;1135           u32Freqout = __IRC22M;
000028  4809              LDR      r0,|L20.80|
                  |L20.42|
;;;1136       
;;;1137       }
;;;1138       u32AHBDivider = SYSCLK->CLKDIV.HCLK_N + 1 ;
00002a  69a1              LDR      r1,[r4,#0x18]
00002c  0709              LSLS     r1,r1,#28
00002e  0f09              LSRS     r1,r1,#28
000030  1c49              ADDS     r1,r1,#1
;;;1139       
;;;1140       return (u32Freqout/u32AHBDivider);  
000032  f7fffffe          BL       __aeabi_uidivmod
;;;1141   }
000036  bd10              POP      {r4,pc}
                  |L20.56|
000038  4806              LDR      r0,|L20.84|
00003a  e7f6              B        |L20.42|
                  |L20.60|
00003c  2001              MOVS     r0,#1                 ;1123
00003e  03c0              LSLS     r0,r0,#15             ;1123
000040  e7f3              B        |L20.42|
                  |L20.66|
000042  f7fffffe          BL       DrvSYS_GetPLLClockFreq
000046  e7f0              B        |L20.42|
                  |L20.72|
000048  4803              LDR      r0,|L20.88|
00004a  e7ee              B        |L20.42|
;;;1142   
                          ENDP

                  |L20.76|
                          DCD      0x50000200
                  |L20.80|
                          DCD      0x01518000
                  |L20.84|
                          DCD      0x00b71b00
                  |L20.88|
                          DCD      0x00002710

                          AREA ||i.DrvSYS_GetPLLClockFreq||, CODE, READONLY, ALIGN=2

                  DrvSYS_GetPLLClockFreq PROC
;;;1077   /*---------------------------------------------------------------------------------------------------------*/
;;;1078   uint32_t DrvSYS_GetPLLClockFreq(void)
000000  b51f              PUSH     {r0-r4,lr}
;;;1079   {
;;;1080       uint32_t u32Freq =0, u32PLLSrc;
;;;1081       uint32_t au32Map[4] = {1, 2, 2, 4};
000002  4912              LDR      r1,|L21.76|
000004  2000              MOVS     r0,#0                 ;1080
000006  c91e              LDM      r1,{r1-r4}
;;;1082   
;;;1083       if (SYSCLK->PLLCON.PLL_SRC == 1)
000008  9403              STR      r4,[sp,#0xc]
00000a  466c              MOV      r4,sp
00000c  c40e              STM      r4!,{r1-r3}
00000e  4c10              LDR      r4,|L21.80|
000010  6a21              LDR      r1,[r4,#0x20]
000012  0309              LSLS     r1,r1,#12
000014  d501              BPL      |L21.26|
;;;1084       {
;;;1085           u32PLLSrc = __IRC22M;   
000016  4a0f              LDR      r2,|L21.84|
000018  e000              B        |L21.28|
                  |L21.26|
;;;1086       }
;;;1087       else
;;;1088       {
;;;1089           u32PLLSrc = __XTAL;
00001a  4a0f              LDR      r2,|L21.88|
                  |L21.28|
;;;1090       }
;;;1091   
;;;1092       if (SYSCLK->PLLCON.PD ==1)  
00001c  6a21              LDR      r1,[r4,#0x20]
00001e  03c9              LSLS     r1,r1,#15
000020  d412              BMI      |L21.72|
;;;1093           u32Freq = 0;    
;;;1094       else        
;;;1095           u32Freq = u32PLLSrc * (SYSCLK->PLLCON.FB_DV+2) / (SYSCLK->PLLCON.IN_DV+2) / au32Map[SYSCLK->PLLCON.OUT_DV];
000022  6a20              LDR      r0,[r4,#0x20]
000024  0480              LSLS     r0,r0,#18
000026  0ec1              LSRS     r1,r0,#27
000028  6a20              LDR      r0,[r4,#0x20]
00002a  1c89              ADDS     r1,r1,#2
00002c  05c0              LSLS     r0,r0,#23
00002e  0dc0              LSRS     r0,r0,#23
000030  1c80              ADDS     r0,r0,#2
000032  4350              MULS     r0,r2,r0
000034  f7fffffe          BL       __aeabi_uidivmod
000038  6a21              LDR      r1,[r4,#0x20]
00003a  466a              MOV      r2,sp
00003c  0409              LSLS     r1,r1,#16
00003e  0f89              LSRS     r1,r1,#30
000040  0089              LSLS     r1,r1,#2
000042  5851              LDR      r1,[r2,r1]
000044  f7fffffe          BL       __aeabi_uidivmod
                  |L21.72|
;;;1096   
;;;1097       return u32Freq;
;;;1098   }
000048  b004              ADD      sp,sp,#0x10
00004a  bd10              POP      {r4,pc}
;;;1099   
                          ENDP

                  |L21.76|
                          DCD      ||.constdata||
                  |L21.80|
                          DCD      0x50000200
                  |L21.84|
                          DCD      0x01518000
                  |L21.88|
                          DCD      0x00b71b00

                          AREA ||i.DrvSYS_GetPLLContent||, CODE, READONLY, ALIGN=2

                  DrvSYS_GetPLLContent PROC
;;;990    /*---------------------------------------------------------------------------------------------------------*/
;;;991    uint32_t DrvSYS_GetPLLContent(E_SYS_PLL_CLKSRC ePllSrc, uint32_t u32PllClk)
000000  b5f8              PUSH     {r3-r7,lr}
;;;992    {
000002  460a              MOV      r2,r1
;;;993        uint32_t u32NR, u32NF, u32NO;
;;;994        
;;;995        uint32_t u32PllSrcClk = __XTAL, u32Register=0;
;;;996    
;;;997        if ( (u32PllClk <= FREQ_200MHZ) && (u32PllClk > FREQ_100MHZ) )
000004  4920              LDR      r1,|L22.136|
000006  4b21              LDR      r3,|L22.140|
000008  4e1e              LDR      r6,|L22.132|
00000a  1851              ADDS     r1,r2,r1
00000c  4299              CMP      r1,r3
00000e  d801              BHI      |L22.20|
;;;998        {
;;;999            u32NO = 0;
000010  2500              MOVS     r5,#0
000012  e00f              B        |L22.52|
                  |L22.20|
;;;1000       }
;;;1001       else if ( (u32PllClk <= FREQ_100MHZ) && (u32PllClk > FREQ_50MHZ) )
000014  491e              LDR      r1,|L22.144|
000016  4b1f              LDR      r3,|L22.148|
000018  1851              ADDS     r1,r2,r1
00001a  4299              CMP      r1,r3
00001c  d802              BHI      |L22.36|
;;;1002       {
;;;1003           u32NO = 1;
00001e  2501              MOVS     r5,#1
;;;1004           u32PllClk = u32PllClk << 1;
000020  0052              LSLS     r2,r2,#1
000022  e007              B        |L22.52|
                  |L22.36|
;;;1005       }
;;;1006       else if ( (u32PllClk <= FREQ_50MHZ) && (u32PllClk >= FREQ_25MHZ) )
000024  491c              LDR      r1,|L22.152|
000026  4b1c              LDR      r3,|L22.152|
000028  1851              ADDS     r1,r2,r1
00002a  425b              RSBS     r3,r3,#0
00002c  4299              CMP      r1,r3
00002e  d806              BHI      |L22.62|
;;;1007       {
;;;1008           u32NO = 3;
000030  2503              MOVS     r5,#3
;;;1009           u32PllClk = u32PllClk << 2;
000032  0092              LSLS     r2,r2,#2
                  |L22.52|
;;;1010       }
;;;1011       else
;;;1012       {
;;;1013           return 0xC22E;  
;;;1014       } 
;;;1015           
;;;1016       if (ePllSrc == E_SYS_EXTERNAL_12M)
000034  2800              CMP      r0,#0
000036  d005              BEQ      |L22.68|
;;;1017           u32PllSrcClk = __XTAL;
;;;1018       else if (ePllSrc == E_SYS_INTERNAL_22M)
000038  2801              CMP      r0,#1
00003a  d002              BEQ      |L22.66|
00003c  e002              B        |L22.68|
                  |L22.62|
00003e  4817              LDR      r0,|L22.156|
;;;1019           u32PllSrcClk = __IRC22M; 
;;;1020   
;;;1021       u32NF = u32PllClk / 1000000;
;;;1022       u32NR = u32PllSrcClk / 1000000; 
;;;1023       
;;;1024       while(1)
;;;1025       {
;;;1026           if ( (u32NR & 0x01) || (u32NF & 0x01) || (u32NR == 2) || (u32NF == 2) )
;;;1027           {
;;;1028               break;
;;;1029           }
;;;1030           else
;;;1031           {
;;;1032               u32NR >>= 1;
;;;1033               u32NF >>= 1;
;;;1034           }   
;;;1035       }    
;;;1036           
;;;1037       u32Register = (u32NO<<14) | ((u32NR - 2)<<9) | (u32NF - 2);
;;;1038   
;;;1039       /* Return the nearest value */
;;;1040       return u32Register;
;;;1041   }
000040  bdf8              POP      {r3-r7,pc}
                  |L22.66|
000042  4e17              LDR      r6,|L22.160|
                  |L22.68|
000044  4f17              LDR      r7,|L22.164|
000046  4610              MOV      r0,r2                 ;1021
000048  4639              MOV      r1,r7                 ;1021
00004a  f7fffffe          BL       __aeabi_uidivmod
00004e  4604              MOV      r4,r0                 ;1021
000050  4639              MOV      r1,r7                 ;1022
000052  4630              MOV      r0,r6                 ;1022
000054  f7fffffe          BL       __aeabi_uidivmod
                  |L22.88|
000058  4601              MOV      r1,r0                 ;1022
00005a  4321              ORRS     r1,r1,r4              ;1026
00005c  07c9              LSLS     r1,r1,#31             ;1026
00005e  d106              BNE      |L22.110|
000060  2802              CMP      r0,#2                 ;1026
000062  d004              BEQ      |L22.110|
000064  2c02              CMP      r4,#2                 ;1026
000066  d002              BEQ      |L22.110|
000068  0840              LSRS     r0,r0,#1              ;1032
00006a  0864              LSRS     r4,r4,#1              ;1033
00006c  e7f4              B        |L22.88|
                  |L22.110|
00006e  2201              MOVS     r2,#1                 ;1037
000070  0240              LSLS     r0,r0,#9              ;1037
000072  0292              LSLS     r2,r2,#10             ;1037
000074  03a9              LSLS     r1,r5,#14             ;1037
000076  1a80              SUBS     r0,r0,r2              ;1037
000078  4301              ORRS     r1,r1,r0              ;1037
00007a  1ea4              SUBS     r4,r4,#2              ;1037
00007c  4321              ORRS     r1,r1,r4              ;1037
00007e  4608              MOV      r0,r1                 ;1040
000080  bdf8              POP      {r3-r7,pc}
;;;1042   
                          ENDP

000082  0000              DCW      0x0000
                  |L22.132|
                          DCD      0x00b71b00
                  |L22.136|
                          DCD      0xfa0a1eff
                  |L22.140|
                          DCD      0x05f5e0ff
                  |L22.144|
                          DCD      0xfd050f7f
                  |L22.148|
                          DCD      0x02faf07f
                  |L22.152|
                          DCD      0xfe8287c0
                  |L22.156|
                          DCD      0x0000c22e
                  |L22.160|
                          DCD      0x01518000
                  |L22.164|
                          DCD      0x000f4240

                          AREA ||i.DrvSYS_GetResetSource||, CODE, READONLY, ALIGN=1

                  DrvSYS_GetResetSource PROC
;;;129    /*---------------------------------------------------------------------------------------------------------*/
;;;130    uint32_t DrvSYS_GetResetSource(void)
000000  2005              MOVS     r0,#5
;;;131    {
;;;132        return *((__IO uint32_t *) &SYS->RSTSRC);
000002  0700              LSLS     r0,r0,#28
000004  6840              LDR      r0,[r0,#4]
;;;133    }
000006  4770              BX       lr
;;;134    
                          ENDP


                          AREA ||i.DrvSYS_GetVersion||, CODE, READONLY, ALIGN=2

                  DrvSYS_GetVersion PROC
;;;32     /*---------------------------------------------------------------------------------------------------------*/
;;;33     uint32_t DrvSYS_GetVersion(void)
000000  4800              LDR      r0,|L24.4|
;;;34     {
;;;35         return DRVSYS_VERSION_NUM;
;;;36     }
000002  4770              BX       lr
;;;37     
                          ENDP

                  |L24.4|
                          DCD      0x00010203

                          AREA ||i.DrvSYS_IsProtectedRegLocked||, CODE, READONLY, ALIGN=2

                  DrvSYS_IsProtectedRegLocked PROC
;;;112    /*---------------------------------------------------------------------------------------------------------*/
;;;113    int32_t DrvSYS_IsProtectedRegLocked(void)
000000  4802              LDR      r0,|L25.12|
;;;114    {
;;;115        return (SYS->REGWRPROT & 0x01);
000002  6800              LDR      r0,[r0,#0]
000004  07c0              LSLS     r0,r0,#31
000006  0fc0              LSRS     r0,r0,#31
;;;116    }
000008  4770              BX       lr
;;;117    
                          ENDP

00000a  0000              DCW      0x0000
                  |L25.12|
                          DCD      0x50000100

                          AREA ||i.DrvSYS_LockProtectedReg||, CODE, READONLY, ALIGN=2

                  DrvSYS_LockProtectedReg PROC
;;;90     /*---------------------------------------------------------------------------------------------------------*/
;;;91     int32_t DrvSYS_LockProtectedReg(void)
000000  4804              LDR      r0,|L26.20|
;;;92     {
;;;93         uint32_t lockbit;
;;;94         
;;;95         SYS->REGWRPROT = 0x00;
000002  2100              MOVS     r1,#0
000004  6001              STR      r1,[r0,#0]
;;;96     
;;;97         lockbit = SYS->REGWRPROT & 0x01;
000006  6800              LDR      r0,[r0,#0]
000008  07c0              LSLS     r0,r0,#31
00000a  0fc0              LSRS     r0,r0,#31
00000c  d000              BEQ      |L26.16|
;;;98         return (lockbit)? E_DRVSYS_ERR_LOCK_FAIL : 0;
00000e  4802              LDR      r0,|L26.24|
                  |L26.16|
;;;99     }
000010  4770              BX       lr
;;;100    
                          ENDP

000012  0000              DCW      0x0000
                  |L26.20|
                          DCD      0x50000100
                  |L26.24|
                          DCD      0xffff9602

                          AREA ||i.DrvSYS_Open||, CODE, READONLY, ALIGN=2

                  DrvSYS_Open PROC
;;;1167   /*---------------------------------------------------------------------------------------------------------*/
;;;1168   int32_t DrvSYS_Open(uint32_t u32Hclk)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1169   {
000002  4601              MOV      r1,r0
;;;1170       uint32_t u32PllCr;  
;;;1171       volatile uint32_t delayCnt;
;;;1172       E_SYS_PLL_CLKSRC ePllSrc = E_SYS_EXTERNAL_12M;
;;;1173   
;;;1174       if ( (u32Hclk > FREQ_50MHZ) || (u32Hclk < FREQ_25MHZ) )
000004  481e              LDR      r0,|L27.128|
000006  4b1f              LDR      r3,|L27.132|
000008  2200              MOVS     r2,#0                 ;1172
00000a  1808              ADDS     r0,r1,r0
00000c  4298              CMP      r0,r3
00000e  d301              BCC      |L27.20|
;;;1175       {
;;;1176           return E_DRVSYS_ERR_OUT_OF_RANGE;
000010  481d              LDR      r0,|L27.136|
;;;1177       }
;;;1178           
;;;1179       /* Check the status of Register Write-Protection Function */
;;;1180       if (DrvSYS_IsProtectedRegLocked() == 0)
;;;1181       {
;;;1182           return E_DRVSYS_ERR_REG_PROTECTED;
;;;1183       }
;;;1184       
;;;1185       if (SYSCLK->PLLCON.PLL_SRC == 0)
;;;1186       {
;;;1187           SYSCLK->PWRCON.XTL12M_EN = 1;
;;;1188           ePllSrc = E_SYS_EXTERNAL_12M;
;;;1189       }
;;;1190       else
;;;1191       {
;;;1192           SYSCLK->PWRCON.OSC22M_EN = 1;
;;;1193           ePllSrc = E_SYS_INTERNAL_22M;
;;;1194       }
;;;1195   
;;;1196       u32PllCr = DrvSYS_GetPLLContent(ePllSrc, u32Hclk);
;;;1197       
;;;1198       /*Delay for 12M or 22M stable*/
;;;1199       for (delayCnt=0;delayCnt<10000;delayCnt++);
;;;1200   
;;;1201       DrvSYS_SetPLLContent(u32PllCr);
;;;1202       SYSCLK->PLLCON.OE     = 0;
;;;1203       SYSCLK->PLLCON.PD     = 0;
;;;1204       
;;;1205       /*Delay for PLL stable*/
;;;1206       for (delayCnt=0;delayCnt<10000;delayCnt++);
;;;1207   
;;;1208       /* Change HCLK clock source to be PLL. */
;;;1209       DrvSYS_SelectHCLKSource(2);
;;;1210       
;;;1211       return E_SUCCESS;
;;;1212   }
000012  bdf8              POP      {r3-r7,pc}
                  |L27.20|
000014  f7fffffe          BL       DrvSYS_IsProtectedRegLocked
000018  2800              CMP      r0,#0                 ;1180
00001a  d008              BEQ      |L27.46|
00001c  4d1b              LDR      r5,|L27.140|
00001e  6a28              LDR      r0,[r5,#0x20]         ;1185
000020  0300              LSLS     r0,r0,#12             ;1185
000022  6828              LDR      r0,[r5,#0]            ;1192
000024  d406              BMI      |L27.52|
000026  2301              MOVS     r3,#1                 ;1187
000028  4318              ORRS     r0,r0,r3              ;1187
00002a  6028              STR      r0,[r5,#0]            ;1187
00002c  e006              B        |L27.60|
                  |L27.46|
00002e  4816              LDR      r0,|L27.136|
000030  1c40              ADDS     r0,r0,#1              ;1182
000032  bdf8              POP      {r3-r7,pc}
                  |L27.52|
000034  2204              MOVS     r2,#4                 ;1192
000036  4310              ORRS     r0,r0,r2              ;1192
000038  6028              STR      r0,[r5,#0]            ;1192
00003a  2201              MOVS     r2,#1                 ;1193
                  |L27.60|
00003c  4610              MOV      r0,r2                 ;1196
00003e  f7fffffe          BL       DrvSYS_GetPLLContent
000042  2600              MOVS     r6,#0                 ;1199
000044  4c12              LDR      r4,|L27.144|
000046  9600              STR      r6,[sp,#0]            ;1199
                  |L27.72|
000048  9900              LDR      r1,[sp,#0]            ;1199
00004a  1c49              ADDS     r1,r1,#1              ;1199
00004c  9100              STR      r1,[sp,#0]            ;1199
00004e  42a1              CMP      r1,r4                 ;1199
000050  d3fa              BCC      |L27.72|
000052  f7fffffe          BL       DrvSYS_SetPLLContent
000056  6a28              LDR      r0,[r5,#0x20]         ;1202
000058  2101              MOVS     r1,#1                 ;1202
00005a  0489              LSLS     r1,r1,#18             ;1202
00005c  4388              BICS     r0,r0,r1              ;1202
00005e  6228              STR      r0,[r5,#0x20]         ;1202
000060  6a28              LDR      r0,[r5,#0x20]         ;1203
000062  1089              ASRS     r1,r1,#2              ;1203
000064  4388              BICS     r0,r0,r1              ;1203
000066  6228              STR      r0,[r5,#0x20]         ;1203
000068  9600              STR      r6,[sp,#0]            ;1206
                  |L27.106|
00006a  9800              LDR      r0,[sp,#0]            ;1206
00006c  1c40              ADDS     r0,r0,#1              ;1206
00006e  9000              STR      r0,[sp,#0]            ;1206
000070  42a0              CMP      r0,r4                 ;1206
000072  d3fa              BCC      |L27.106|
000074  2002              MOVS     r0,#2                 ;1209
000076  f7fffffe          BL       DrvSYS_SelectHCLKSource
00007a  2000              MOVS     r0,#0                 ;1211
00007c  bdf8              POP      {r3-r7,pc}
;;;1213   
                          ENDP

00007e  0000              DCW      0x0000
                  |L27.128|
                          DCD      0xfe8287c0
                  |L27.132|
                          DCD      0x017d7841
                  |L27.136|
                          DCD      0xffff9606
                  |L27.140|
                          DCD      0x50000200
                  |L27.144|
                          DCD      0x00002710

                          AREA ||i.DrvSYS_ReadProductID||, CODE, READONLY, ALIGN=1

                  DrvSYS_ReadProductID PROC
;;;48     /*---------------------------------------------------------------------------------------------------------*/
;;;49     uint32_t DrvSYS_ReadProductID(void)
000000  2005              MOVS     r0,#5
;;;50     {   
;;;51         return SYS->PDID;
000002  0700              LSLS     r0,r0,#28
000004  6800              LDR      r0,[r0,#0]
;;;52     }
000006  4770              BX       lr
;;;53     
                          ENDP


                          AREA ||i.DrvSYS_ResetCPU||, CODE, READONLY, ALIGN=1

                  DrvSYS_ResetCPU PROC
;;;214    /*---------------------------------------------------------------------------------------------------------*/
;;;215    void DrvSYS_ResetCPU(void)
000000  2005              MOVS     r0,#5
;;;216    {
;;;217        SYS->IPRSTC1.CPU_RST = 1;
000002  0700              LSLS     r0,r0,#28
000004  6881              LDR      r1,[r0,#8]
000006  2202              MOVS     r2,#2
000008  4311              ORRS     r1,r1,r2
00000a  6081              STR      r1,[r0,#8]
;;;218    }
00000c  4770              BX       lr
;;;219    
                          ENDP


                          AREA ||i.DrvSYS_ResetChip||, CODE, READONLY, ALIGN=1

                  DrvSYS_ResetChip PROC
;;;237    /*---------------------------------------------------------------------------------------------------------*/
;;;238    void DrvSYS_ResetChip(void)
000000  2005              MOVS     r0,#5
;;;239    {
;;;240        SYS->IPRSTC1.CHIP_RST = 1;
000002  0700              LSLS     r0,r0,#28
000004  6881              LDR      r1,[r0,#8]
000006  2201              MOVS     r2,#1
000008  4311              ORRS     r1,r1,r2
00000a  6081              STR      r1,[r0,#8]
;;;241    }
00000c  4770              BX       lr
;;;242    
                          ENDP


                          AREA ||i.DrvSYS_ResetIP||, CODE, READONLY, ALIGN=1

                  DrvSYS_ResetIP PROC
;;;174    /*---------------------------------------------------------------------------------------------------------*/
;;;175    void DrvSYS_ResetIP(E_SYS_IP_RST eIpRst)
000000  2305              MOVS     r3,#5
;;;176    {   
;;;177        uint32_t u32Reg;
;;;178    
;;;179        if (eIpRst == E_SYS_PDMA_RST)
;;;180        {
;;;181            SYS->IPRSTC1.PDMA_RST = 1;
000002  071b              LSLS     r3,r3,#28
000004  2820              CMP      r0,#0x20              ;179
000006  d00a              BEQ      |L31.30|
;;;182            SYS->IPRSTC1.PDMA_RST = 0;
;;;183        }
;;;184        else if (eIpRst == E_SYS_EBI_RST)
000008  2821              CMP      r0,#0x21
00000a  d010              BEQ      |L31.46|
;;;185        {
;;;186            SYS->IPRSTC1.EBI_RST = 1;
;;;187            SYS->IPRSTC1.EBI_RST = 0;   
;;;188        }
;;;189        else
;;;190        {
;;;191            u32Reg = *((__IO uint32_t *) &SYS->IPRSTC2);
00000c  68d9              LDR      r1,[r3,#0xc]
;;;192            *((__IO uint32_t *) &SYS->IPRSTC2) = u32Reg | (1<<eIpRst);
00000e  2201              MOVS     r2,#1
000010  4082              LSLS     r2,r2,r0
000012  4610              MOV      r0,r2
000014  4308              ORRS     r0,r0,r1
000016  60d8              STR      r0,[r3,#0xc]
;;;193            *((__IO uint32_t *) &SYS->IPRSTC2) = u32Reg & ~(1<<eIpRst);
000018  4391              BICS     r1,r1,r2
00001a  60d9              STR      r1,[r3,#0xc]
;;;194        }
;;;195    }
00001c  4770              BX       lr
                  |L31.30|
00001e  6899              LDR      r1,[r3,#8]            ;181
000020  2004              MOVS     r0,#4                 ;181
000022  4301              ORRS     r1,r1,r0              ;181
000024  6099              STR      r1,[r3,#8]            ;181
000026  6899              LDR      r1,[r3,#8]            ;182
000028  4381              BICS     r1,r1,r0              ;182
00002a  6099              STR      r1,[r3,#8]            ;182
00002c  4770              BX       lr
                  |L31.46|
00002e  6898              LDR      r0,[r3,#8]            ;186
000030  2108              MOVS     r1,#8                 ;186
000032  4308              ORRS     r0,r0,r1              ;186
000034  6098              STR      r0,[r3,#8]            ;186
000036  6898              LDR      r0,[r3,#8]            ;187
000038  4388              BICS     r0,r0,r1              ;187
00003a  6098              STR      r0,[r3,#8]            ;187
00003c  4770              BX       lr
;;;196    
                          ENDP


                          AREA ||i.DrvSYS_SelectBODVolt||, CODE, READONLY, ALIGN=1

                  DrvSYS_SelectBODVolt PROC
;;;261    /*---------------------------------------------------------------------------------------------------------*/
;;;262    void DrvSYS_SelectBODVolt(uint8_t u8Volt)
000000  2205              MOVS     r2,#5
;;;263    {
;;;264        SYS->BODCR.BOD_VL = u8Volt;
000002  0712              LSLS     r2,r2,#28
000004  6991              LDR      r1,[r2,#0x18]
000006  2306              MOVS     r3,#6
000008  0780              LSLS     r0,r0,#30
00000a  4399              BICS     r1,r1,r3
00000c  0f40              LSRS     r0,r0,#29
00000e  4301              ORRS     r1,r1,r0
000010  6191              STR      r1,[r2,#0x18]
;;;265    }
000012  4770              BX       lr
;;;266    
                          ENDP


                          AREA ||i.DrvSYS_SelectHCLKSource||, CODE, READONLY, ALIGN=2

                  DrvSYS_SelectHCLKSource PROC
;;;598    /*---------------------------------------------------------------------------------------------------------*/
;;;599    int32_t DrvSYS_SelectHCLKSource(uint8_t u8ClkSrcSel)
000000  b510              PUSH     {r4,lr}
;;;600    {
;;;601        if ((u8ClkSrcSel > 7) || ((u8ClkSrcSel > 3) && (u8ClkSrcSel < 7)))
000002  2807              CMP      r0,#7
000004  d802              BHI      |L33.12|
000006  1f01              SUBS     r1,r0,#4
000008  2903              CMP      r1,#3
00000a  d201              BCS      |L33.16|
                  |L33.12|
;;;602        {
;;;603            return E_DRVSYS_ERR_ARGUMENT;
00000c  4806              LDR      r0,|L33.40|
;;;604        }
;;;605        else
;;;606        {
;;;607            SYSCLK->CLKSEL0.HCLK_S = u8ClkSrcSel;
;;;608        }
;;;609        
;;;610        SystemCoreClockUpdate();
;;;611        
;;;612        return 0;
;;;613    }
00000e  bd10              POP      {r4,pc}
                  |L33.16|
000010  4906              LDR      r1,|L33.44|
000012  690a              LDR      r2,[r1,#0x10]         ;607
000014  0740              LSLS     r0,r0,#29             ;607
000016  08d2              LSRS     r2,r2,#3              ;607
000018  00d2              LSLS     r2,r2,#3              ;607
00001a  0f40              LSRS     r0,r0,#29             ;607
00001c  4302              ORRS     r2,r2,r0              ;607
00001e  610a              STR      r2,[r1,#0x10]         ;607
000020  f7fffffe          BL       SystemCoreClockUpdate
000024  2000              MOVS     r0,#0                 ;612
000026  bd10              POP      {r4,pc}
;;;614    
                          ENDP

                  |L33.40|
                          DCD      0xffff9603
                  |L33.44|
                          DCD      0x50000200

                          AREA ||i.DrvSYS_SelectIPClockSource||, CODE, READONLY, ALIGN=2

                  DrvSYS_SelectIPClockSource PROC
;;;697    /*---------------------------------------------------------------------------------------------------------*/
;;;698    int32_t DrvSYS_SelectIPClockSource(E_SYS_IP_CLKSRC eIpClkSrc, uint8_t u8ClkSrcSel)
000000  b5f0              PUSH     {r4-r7,lr}
;;;699    {
;;;700        
;;;701        switch(eIpClkSrc)
;;;702        {
;;;703            case E_SYS_FRQDIV_CLKSRC:  
;;;704                SYSCLK->CLKSEL2.FRQDIV_S = u8ClkSrcSel;
000002  078c              LSLS     r4,r1,#30
000004  0fa4              LSRS     r4,r4,#30
;;;705                break;
;;;706            case E_SYS_I2S_CLKSRC:
;;;707                SYSCLK->CLKSEL2.I2S_S = u8ClkSrcSel;
;;;708                break;
;;;709            case E_SYS_PWM67_CLKSRC:  
;;;710                SYSCLK->CLKSEL2.PWM67_S = u8ClkSrcSel;
;;;711                break;
;;;712            case E_SYS_PWM45_CLKSRC:
;;;713                SYSCLK->CLKSEL2.PWM45_S = u8ClkSrcSel;
;;;714                break;
;;;715            case E_SYS_PWM23_CLKSRC:  
;;;716                SYSCLK->CLKSEL1.PWM23_S = u8ClkSrcSel;
;;;717                break;
;;;718            case E_SYS_PWM01_CLKSRC:
;;;719                SYSCLK->CLKSEL1.PWM01_S = u8ClkSrcSel;
;;;720                break;
;;;721            case E_SYS_UART_CLKSRC:
;;;722                SYSCLK->CLKSEL1.UART_S = u8ClkSrcSel;
;;;723                break;
;;;724            case E_SYS_TMR3_CLKSRC:
;;;725                SYSCLK->CLKSEL1.TMR3_S = u8ClkSrcSel;
000006  074d              LSLS     r5,r1,#29
000008  270c              MOVS     r7,#0xc               ;699
00000a  4a2e              LDR      r2,|L34.196|
00000c  00a6              LSLS     r6,r4,#2              ;704
00000e  0f6d              LSRS     r5,r5,#29
000010  0003              MOVS     r3,r0                 ;701
000012  f7fffffe          BL       __ARM_common_switch8
000016  0d4f              DCB      0x0d,0x4f
000018  4b453f39          DCB      0x4b,0x45,0x3f,0x39
00001c  332c221d          DCB      0x33,0x2c,0x22,0x1d
000020  0c081712          DCB      0x0c,0x08,0x17,0x12
000024  5400              DCB      0x54,0x00
000026  69d0              LDR      r0,[r2,#0x1c]         ;704
000028  43b8              BICS     r0,r0,r7              ;704
00002a  4330              ORRS     r0,r0,r6              ;704
00002c  e003              B        |L34.54|
00002e  69d0              LDR      r0,[r2,#0x1c]         ;707
000030  0880              LSRS     r0,r0,#2              ;707
000032  0080              LSLS     r0,r0,#2              ;707
000034  4320              ORRS     r0,r0,r4              ;707
                  |L34.54|
000036  61d0              STR      r0,[r2,#0x1c]         ;704
000038  e017              B        |L34.106|
00003a  69d0              LDR      r0,[r2,#0x1c]         ;710
00003c  21c0              MOVS     r1,#0xc0              ;710
00003e  4388              BICS     r0,r0,r1              ;710
000040  01a1              LSLS     r1,r4,#6              ;710
000042  e003              B        |L34.76|
000044  69d0              LDR      r0,[r2,#0x1c]         ;713
000046  2130              MOVS     r1,#0x30              ;713
000048  4388              BICS     r0,r0,r1              ;713
00004a  0121              LSLS     r1,r4,#4              ;713
                  |L34.76|
00004c  4308              ORRS     r0,r0,r1              ;713
00004e  e7f2              B        |L34.54|
000050  6950              LDR      r0,[r2,#0x14]         ;716
000052  0080              LSLS     r0,r0,#2              ;716
000054  0880              LSRS     r0,r0,#2              ;716
000056  0789              LSLS     r1,r1,#30             ;716
000058  e005              B        |L34.102|
00005a  6950              LDR      r0,[r2,#0x14]         ;719
00005c  2303              MOVS     r3,#3                 ;719
00005e  071b              LSLS     r3,r3,#28             ;719
000060  4398              BICS     r0,r0,r3              ;719
000062  0789              LSLS     r1,r1,#30             ;719
000064  0889              LSRS     r1,r1,#2              ;719
                  |L34.102|
000066  4308              ORRS     r0,r0,r1              ;716
                  |L34.104|
000068  6150              STR      r0,[r2,#0x14]         ;716
                  |L34.106|
;;;726                break;
;;;727            case E_SYS_TMR2_CLKSRC:
;;;728                SYSCLK->CLKSEL1.TMR2_S = u8ClkSrcSel;
;;;729                break;
;;;730            case E_SYS_TMR1_CLKSRC:
;;;731                SYSCLK->CLKSEL1.TMR1_S = u8ClkSrcSel;
;;;732                break;
;;;733            case E_SYS_TMR0_CLKSRC:
;;;734                SYSCLK->CLKSEL1.TMR0_S = u8ClkSrcSel;
;;;735                break;
;;;736            case E_SYS_ADC_CLKSRC:
;;;737                SYSCLK->CLKSEL1.ADC_S = u8ClkSrcSel;
;;;738                break;
;;;739            case E_SYS_WDT_CLKSRC:
;;;740                SYSCLK->CLKSEL1.WDT_S = u8ClkSrcSel;
;;;741                break;
;;;742            default:
;;;743                return E_DRVSYS_ERR_IPSRC;
;;;744        }
;;;745        
;;;746        return E_SUCCESS;
00006a  2000              MOVS     r0,#0
;;;747    }
00006c  bdf0              POP      {r4-r7,pc}
00006e  6950              LDR      r0,[r2,#0x14]         ;722
000070  2303              MOVS     r3,#3                 ;722
000072  061b              LSLS     r3,r3,#24             ;722
000074  4398              BICS     r0,r0,r3              ;722
000076  0789              LSLS     r1,r1,#30             ;722
000078  0989              LSRS     r1,r1,#6              ;722
00007a  e7f4              B        |L34.102|
00007c  6950              LDR      r0,[r2,#0x14]         ;725
00007e  2107              MOVS     r1,#7                 ;725
000080  0509              LSLS     r1,r1,#20             ;725
000082  4388              BICS     r0,r0,r1              ;725
000084  0529              LSLS     r1,r5,#20             ;725
000086  e7ee              B        |L34.102|
000088  6950              LDR      r0,[r2,#0x14]         ;728
00008a  2107              MOVS     r1,#7                 ;728
00008c  0409              LSLS     r1,r1,#16             ;728
00008e  4388              BICS     r0,r0,r1              ;728
000090  0429              LSLS     r1,r5,#16             ;728
000092  e7e8              B        |L34.102|
000094  6950              LDR      r0,[r2,#0x14]         ;731
000096  2107              MOVS     r1,#7                 ;731
000098  0309              LSLS     r1,r1,#12             ;731
00009a  4388              BICS     r0,r0,r1              ;731
00009c  0329              LSLS     r1,r5,#12             ;731
00009e  e7e2              B        |L34.102|
0000a0  6950              LDR      r0,[r2,#0x14]         ;734
0000a2  2107              MOVS     r1,#7                 ;734
0000a4  0209              LSLS     r1,r1,#8              ;734
0000a6  4388              BICS     r0,r0,r1              ;734
0000a8  0229              LSLS     r1,r5,#8              ;734
0000aa  e7dc              B        |L34.102|
0000ac  6950              LDR      r0,[r2,#0x14]         ;737
0000ae  43b8              BICS     r0,r0,r7              ;737
0000b0  4330              ORRS     r0,r0,r6              ;737
0000b2  e7d9              B        |L34.104|
0000b4  6950              LDR      r0,[r2,#0x14]         ;740
0000b6  0880              LSRS     r0,r0,#2              ;740
0000b8  0080              LSLS     r0,r0,#2              ;740
0000ba  4320              ORRS     r0,r0,r4              ;740
0000bc  e7d4              B        |L34.104|
0000be  4802              LDR      r0,|L34.200|
0000c0  bdf0              POP      {r4-r7,pc}
;;;748    
                          ENDP

0000c2  0000              DCW      0x0000
                  |L34.196|
                          DCD      0x50000200
                  |L34.200|
                          DCD      0xffff9604

                          AREA ||i.DrvSYS_SelectPLLSource||, CODE, READONLY, ALIGN=2

                  DrvSYS_SelectPLLSource PROC
;;;933    /*---------------------------------------------------------------------------------------------------------*/
;;;934    void DrvSYS_SelectPLLSource(E_SYS_PLL_CLKSRC ePllSrc)
000000  4a04              LDR      r2,|L35.20|
;;;935    {
;;;936        SYSCLK->PLLCON.PLL_SRC = ePllSrc;
000002  6a11              LDR      r1,[r2,#0x20]
000004  0293              LSLS     r3,r2,#10
000006  07c0              LSLS     r0,r0,#31
000008  4399              BICS     r1,r1,r3
00000a  0b00              LSRS     r0,r0,#12
00000c  4301              ORRS     r1,r1,r0
00000e  6211              STR      r1,[r2,#0x20]
;;;937    }
000010  4770              BX       lr
;;;938    
                          ENDP

000012  0000              DCW      0x0000
                  |L35.20|
                          DCD      0x50000200

                          AREA ||i.DrvSYS_SelectSysTickSource||, CODE, READONLY, ALIGN=2

                  DrvSYS_SelectSysTickSource PROC
;;;637    /*---------------------------------------------------------------------------------------------------------*/
;;;638    int32_t DrvSYS_SelectSysTickSource(uint8_t u8ClkSrcSel)
000000  2807              CMP      r0,#7
;;;639    {
000002  d802              BHI      |L36.10|
;;;640        if ((u8ClkSrcSel > 7) || ((u8ClkSrcSel > 3) && (u8ClkSrcSel < 7)))
000004  1f01              SUBS     r1,r0,#4
000006  2903              CMP      r1,#3
000008  d201              BCS      |L36.14|
                  |L36.10|
;;;641        {
;;;642            return E_DRVSYS_ERR_ARGUMENT;
00000a  4806              LDR      r0,|L36.36|
;;;643        }
;;;644        else
;;;645        {
;;;646            SYSCLK->CLKSEL0.STCLK_S = u8ClkSrcSel;
;;;647        }
;;;648        return 0;
;;;649    }
00000c  4770              BX       lr
                  |L36.14|
00000e  4a06              LDR      r2,|L36.40|
000010  6911              LDR      r1,[r2,#0x10]         ;646
000012  2338              MOVS     r3,#0x38              ;646
000014  0740              LSLS     r0,r0,#29             ;646
000016  4399              BICS     r1,r1,r3              ;646
000018  0e80              LSRS     r0,r0,#26             ;646
00001a  4301              ORRS     r1,r1,r0              ;646
00001c  6111              STR      r1,[r2,#0x10]         ;646
00001e  2000              MOVS     r0,#0                 ;648
000020  4770              BX       lr
;;;650    
                          ENDP

000022  0000              DCW      0x0000
                  |L36.36|
                          DCD      0xffff9603
                  |L36.40|
                          DCD      0x50000200

                          AREA ||i.DrvSYS_SetBODFunction||, CODE, READONLY, ALIGN=2

                  DrvSYS_SetBODFunction PROC
;;;287    /*---------------------------------------------------------------------------------------------------------*/
;;;288    void DrvSYS_SetBODFunction(int32_t i32Enable, int32_t i32Mode, BOD_CALLBACK bodcallbackFn)
000000  b570              PUSH     {r4-r6,lr}
;;;289    {
;;;290        SYS->BODCR.BOD_EN = i32Enable;
000002  2305              MOVS     r3,#5
000004  071b              LSLS     r3,r3,#28
000006  699c              LDR      r4,[r3,#0x18]
000008  07c5              LSLS     r5,r0,#31
00000a  0864              LSRS     r4,r4,#1
00000c  0064              LSLS     r4,r4,#1
00000e  0fed              LSRS     r5,r5,#31
000010  432c              ORRS     r4,r4,r5
000012  619c              STR      r4,[r3,#0x18]
;;;291    
;;;292        if (i32Enable)
000014  2800              CMP      r0,#0
000016  d014              BEQ      |L37.66|
;;;293        {
;;;294            SYS->BODCR.BOD_RSTEN = i32Mode;
000018  6998              LDR      r0,[r3,#0x18]
00001a  2408              MOVS     r4,#8
00001c  43a0              BICS     r0,r0,r4
00001e  07cc              LSLS     r4,r1,#31
000020  0f24              LSRS     r4,r4,#28
000022  4320              ORRS     r0,r0,r4
000024  6198              STR      r0,[r3,#0x18]
000026  2401              MOVS     r4,#1
;;;295        
;;;296            if (i32Mode)
000028  2900              CMP      r1,#0
00002a  d001              BEQ      |L37.48|
00002c  4805              LDR      r0,|L37.68|
;;;297            {       
;;;298                NVIC_DisableIRQ(BOD_IRQn);
00002e  e007              B        |L37.64|
                  |L37.48|
;;;299            }
;;;300            else
;;;301            { 
;;;302                BOD_callbackFn = bodcallbackFn;
000030  4805              LDR      r0,|L37.72|
;;;303                NVIC_SetPriority(BOD_IRQn, (1<<__NVIC_PRIO_BITS) - 2);
000032  2102              MOVS     r1,#2
000034  6002              STR      r2,[r0,#0]  ; BOD_callbackFn
000036  2000              MOVS     r0,#0
000038  f7fffffe          BL       NVIC_SetPriority
00003c  4801              LDR      r0,|L37.68|
00003e  3880              SUBS     r0,r0,#0x80
                  |L37.64|
000040  6004              STR      r4,[r0,#0]
                  |L37.66|
;;;304                NVIC_EnableIRQ(BOD_IRQn);
;;;305            }
;;;306        }   
;;;307    }
000042  bd70              POP      {r4-r6,pc}
;;;308    
                          ENDP

                  |L37.68|
                          DCD      0xe000e180
                  |L37.72|
                          DCD      ||.data||

                          AREA ||i.DrvSYS_SetClockDivider||, CODE, READONLY, ALIGN=2

                  DrvSYS_SetClockDivider PROC
;;;763    /*---------------------------------------------------------------------------------------------------------*/
;;;764    int32_t DrvSYS_SetClockDivider(E_SYS_IP_DIV eIpDiv , int32_t i32value)
000000  b510              PUSH     {r4,lr}
;;;765    {
;;;766        if (eIpDiv == E_SYS_ADC_DIV)
;;;767        {
;;;768            SYSCLK->CLKDIV.ADC_N = i32value;
000002  4a16              LDR      r2,|L38.92|
000004  2800              CMP      r0,#0                 ;766
000006  d007              BEQ      |L38.24|
;;;769        }
;;;770        else if(eIpDiv == E_SYS_UART_DIV)
000008  2801              CMP      r0,#1
00000a  d00c              BEQ      |L38.38|
;;;771        {
;;;772            SYSCLK->CLKDIV.UART_N = i32value;
;;;773        }
;;;774        else if(eIpDiv == E_SYS_USB_DIV)
00000c  2802              CMP      r0,#2
00000e  d011              BEQ      |L38.52|
;;;775        {
;;;776            SYSCLK->CLKDIV.USB_N = i32value;
;;;777        }
;;;778        else if(eIpDiv == E_SYS_HCLK_DIV)
000010  2803              CMP      r0,#3
000012  d017              BEQ      |L38.68|
;;;779        {
;;;780            SYSCLK->CLKDIV.HCLK_N = i32value;
;;;781            SystemCoreClockUpdate();
;;;782        }
;;;783        else
;;;784            return E_DRVSYS_ERR_IPDIV;
000014  4812              LDR      r0,|L38.96|
;;;785    
;;;786        return E_SUCCESS;
;;;787    }
000016  bd10              POP      {r4,pc}
                  |L38.24|
000018  6990              LDR      r0,[r2,#0x18]         ;768
00001a  23ff              MOVS     r3,#0xff              ;768
00001c  041b              LSLS     r3,r3,#16             ;768
00001e  4398              BICS     r0,r0,r3              ;768
000020  0609              LSLS     r1,r1,#24             ;768
000022  0a09              LSRS     r1,r1,#8              ;768
000024  e00b              B        |L38.62|
                  |L38.38|
000026  6990              LDR      r0,[r2,#0x18]         ;772
000028  230f              MOVS     r3,#0xf               ;772
00002a  021b              LSLS     r3,r3,#8              ;772
00002c  4398              BICS     r0,r0,r3              ;772
00002e  0709              LSLS     r1,r1,#28             ;772
000030  0d09              LSRS     r1,r1,#20             ;772
000032  e004              B        |L38.62|
                  |L38.52|
000034  6990              LDR      r0,[r2,#0x18]         ;776
000036  23f0              MOVS     r3,#0xf0              ;776
000038  4398              BICS     r0,r0,r3              ;776
00003a  0709              LSLS     r1,r1,#28             ;776
00003c  0e09              LSRS     r1,r1,#24             ;776
                  |L38.62|
00003e  4308              ORRS     r0,r0,r1              ;776
000040  6190              STR      r0,[r2,#0x18]         ;776
000042  e008              B        |L38.86|
                  |L38.68|
000044  6990              LDR      r0,[r2,#0x18]         ;780
000046  0709              LSLS     r1,r1,#28             ;780
000048  0900              LSRS     r0,r0,#4              ;780
00004a  0100              LSLS     r0,r0,#4              ;780
00004c  0f09              LSRS     r1,r1,#28             ;780
00004e  4308              ORRS     r0,r0,r1              ;780
000050  6190              STR      r0,[r2,#0x18]         ;780
000052  f7fffffe          BL       SystemCoreClockUpdate
                  |L38.86|
000056  2000              MOVS     r0,#0                 ;786
000058  bd10              POP      {r4,pc}
;;;788    
                          ENDP

00005a  0000              DCW      0x0000
                  |L38.92|
                          DCD      0x50000200
                  |L38.96|
                          DCD      0xffff9605

                          AREA ||i.DrvSYS_SetFreqDividerOutput||, CODE, READONLY, ALIGN=2

                  DrvSYS_SetFreqDividerOutput PROC
;;;1230   /*---------------------------------------------------------------------------------------------------------*/
;;;1231   int32_t DrvSYS_SetFreqDividerOutput(int32_t i32Flag, uint8_t u8Divider)
000000  b500              PUSH     {lr}
;;;1232   {
;;;1233       if (u8Divider > 15)
000002  290f              CMP      r1,#0xf
000004  d901              BLS      |L39.10|
;;;1234           return E_DRVSYS_ERR_ARGUMENT;
000006  480c              LDR      r0,|L39.56|
;;;1235   
;;;1236       if (i32Flag)
;;;1237       {
;;;1238           SYSCLK->FRQDIV.FSEL = u8Divider;
;;;1239       }
;;;1240       SYSCLK->FRQDIV.FDIV_EN = i32Flag;
;;;1241       DrvSYS_SetIPClock(E_SYS_FDIV_CLK, i32Flag);
;;;1242   
;;;1243       return E_SUCCESS;
;;;1244   }
000008  bd00              POP      {pc}
                  |L39.10|
00000a  4a0c              LDR      r2,|L39.60|
00000c  2800              CMP      r0,#0                 ;1236
00000e  d006              BEQ      |L39.30|
000010  6a53              LDR      r3,[r2,#0x24]         ;1238
000012  0709              LSLS     r1,r1,#28             ;1238
000014  091b              LSRS     r3,r3,#4              ;1238
000016  011b              LSLS     r3,r3,#4              ;1238
000018  0f09              LSRS     r1,r1,#28             ;1238
00001a  430b              ORRS     r3,r3,r1              ;1238
00001c  6253              STR      r3,[r2,#0x24]         ;1238
                  |L39.30|
00001e  6a51              LDR      r1,[r2,#0x24]         ;1240
000020  2310              MOVS     r3,#0x10              ;1240
000022  4399              BICS     r1,r1,r3              ;1240
000024  07c3              LSLS     r3,r0,#31             ;1240
000026  0edb              LSRS     r3,r3,#27             ;1240
000028  4319              ORRS     r1,r1,r3              ;1240
00002a  6251              STR      r1,[r2,#0x24]         ;1240
00002c  4601              MOV      r1,r0                 ;1241
00002e  2006              MOVS     r0,#6                 ;1241
000030  f7fffffe          BL       DrvSYS_SetIPClock
000034  2000              MOVS     r0,#0                 ;1243
000036  bd00              POP      {pc}
;;;1245   
                          ENDP

                  |L39.56|
                          DCD      0xffff9603
                  |L39.60|
                          DCD      0x50000200

                          AREA ||i.DrvSYS_SetIPClock||, CODE, READONLY, ALIGN=2

                  DrvSYS_SetIPClock PROC
;;;544    /*---------------------------------------------------------------------------------------------------------*/
;;;545    void DrvSYS_SetIPClock(E_SYS_IP_CLK eIpClk, int32_t i32Enable)
000000  b510              PUSH     {r4,lr}
;;;546    {   
;;;547        uint32_t u32Reg;
;;;548    
;;;549        if (eIpClk == E_SYS_PDMA_CLK)
;;;550        {
;;;551            SYSCLK->AHBCLK.PDMA_EN = i32Enable;
000002  4c13              LDR      r4,|L40.80|
000004  2821              CMP      r0,#0x21              ;549
000006  d00b              BEQ      |L40.32|
;;;552        }
;;;553        else if (eIpClk == E_SYS_EBI_CLK)
000008  2823              CMP      r0,#0x23
00000a  d00f              BEQ      |L40.44|
;;;554        {
;;;555            SYSCLK->AHBCLK.EBI_EN = i32Enable;
;;;556        }
;;;557        else if (eIpClk == E_SYS_ISP_CLK)
00000c  2822              CMP      r0,#0x22
00000e  d015              BEQ      |L40.60|
;;;558        {
;;;559            SYSCLK->AHBCLK.ISP_EN = i32Enable;
;;;560        }
;;;561        else
;;;562        {
;;;563            u32Reg = *((__IO uint32_t *) &SYSCLK->APBCLK);
000010  68a3              LDR      r3,[r4,#8]
;;;564            
;;;565            if (i32Enable)
;;;566            {
;;;567                *((__IO uint32_t *) &SYSCLK->APBCLK) = u32Reg | (1<<eIpClk);
000012  2201              MOVS     r2,#1
000014  4082              LSLS     r2,r2,r0
000016  2900              CMP      r1,#0                 ;565
000018  d016              BEQ      |L40.72|
00001a  431a              ORRS     r2,r2,r3
00001c  60a2              STR      r2,[r4,#8]
;;;568            }
;;;569            else
;;;570            {
;;;571                *((__IO uint32_t *) &SYSCLK->APBCLK) = u32Reg & ~(1<<eIpClk);
;;;572            }
;;;573        }
;;;574    }
00001e  bd10              POP      {r4,pc}
                  |L40.32|
000020  6860              LDR      r0,[r4,#4]            ;551
000022  2202              MOVS     r2,#2                 ;551
000024  4390              BICS     r0,r0,r2              ;551
000026  07c9              LSLS     r1,r1,#31             ;551
000028  0f89              LSRS     r1,r1,#30             ;551
00002a  e004              B        |L40.54|
                  |L40.44|
00002c  6860              LDR      r0,[r4,#4]            ;555
00002e  2208              MOVS     r2,#8                 ;555
000030  4390              BICS     r0,r0,r2              ;555
000032  07c9              LSLS     r1,r1,#31             ;555
000034  0f09              LSRS     r1,r1,#28             ;555
                  |L40.54|
000036  4308              ORRS     r0,r0,r1              ;551
000038  6060              STR      r0,[r4,#4]            ;551
00003a  bd10              POP      {r4,pc}
                  |L40.60|
00003c  6860              LDR      r0,[r4,#4]            ;559
00003e  2204              MOVS     r2,#4                 ;559
000040  4390              BICS     r0,r0,r2              ;559
000042  07c9              LSLS     r1,r1,#31             ;559
000044  0f49              LSRS     r1,r1,#29             ;559
000046  e7f6              B        |L40.54|
                  |L40.72|
000048  4393              BICS     r3,r3,r2              ;571
00004a  60a3              STR      r3,[r4,#8]            ;571
00004c  bd10              POP      {r4,pc}
;;;575    
                          ENDP

00004e  0000              DCW      0x0000
                  |L40.80|
                          DCD      0x50000200

                          AREA ||i.DrvSYS_SetOscCtrl||, CODE, READONLY, ALIGN=2

                  DrvSYS_SetOscCtrl PROC
;;;809    /*---------------------------------------------------------------------------------------------------------*/
;;;810    int32_t DrvSYS_SetOscCtrl(E_SYS_CHIP_CLKSRC eClkSrc, int32_t i32Enable)
000000  4a12              LDR      r2,|L41.76|
;;;811    {   
;;;812        switch(eClkSrc)
000002  2800              CMP      r0,#0
000004  d007              BEQ      |L41.22|
000006  2801              CMP      r0,#1
000008  d00b              BEQ      |L41.34|
00000a  2802              CMP      r0,#2
00000c  d012              BEQ      |L41.52|
00000e  2803              CMP      r0,#3
000010  d016              BEQ      |L41.64|
;;;813        {
;;;814            case E_SYS_XTL12M:
;;;815                SYSCLK->PWRCON.XTL12M_EN = i32Enable;
;;;816                break;
;;;817            case E_SYS_XTL32K:
;;;818                SYSCLK->PWRCON.XTL32K_EN = i32Enable;
;;;819                break;
;;;820            case E_SYS_OSC22M:
;;;821                SYSCLK->PWRCON.OSC22M_EN = i32Enable;
;;;822                break;
;;;823            case E_SYS_OSC10K:
;;;824                SYSCLK->PWRCON.OSC10K_EN = i32Enable;
;;;825                break;
;;;826            default:
;;;827                return E_DRVSYS_ERR_ARGUMENT;
000012  480f              LDR      r0,|L41.80|
;;;828        }
;;;829        
;;;830        return E_SUCCESS;
;;;831    }
000014  4770              BX       lr
                  |L41.22|
000016  6810              LDR      r0,[r2,#0]            ;815
000018  07c9              LSLS     r1,r1,#31             ;815
00001a  0840              LSRS     r0,r0,#1              ;815
00001c  0040              LSLS     r0,r0,#1              ;815
00001e  0fc9              LSRS     r1,r1,#31             ;815
000020  e004              B        |L41.44|
                  |L41.34|
000022  6810              LDR      r0,[r2,#0]            ;818
000024  2302              MOVS     r3,#2                 ;818
000026  4398              BICS     r0,r0,r3              ;818
000028  07c9              LSLS     r1,r1,#31             ;818
00002a  0f89              LSRS     r1,r1,#30             ;818
                  |L41.44|
00002c  4308              ORRS     r0,r0,r1              ;815
00002e  6010              STR      r0,[r2,#0]            ;815
000030  2000              MOVS     r0,#0                 ;830
000032  4770              BX       lr
                  |L41.52|
000034  6810              LDR      r0,[r2,#0]            ;821
000036  2304              MOVS     r3,#4                 ;821
000038  4398              BICS     r0,r0,r3              ;821
00003a  07c9              LSLS     r1,r1,#31             ;821
00003c  0f49              LSRS     r1,r1,#29             ;821
00003e  e7f5              B        |L41.44|
                  |L41.64|
000040  6810              LDR      r0,[r2,#0]            ;824
000042  2308              MOVS     r3,#8                 ;824
000044  4398              BICS     r0,r0,r3              ;824
000046  07c9              LSLS     r1,r1,#31             ;824
000048  0f09              LSRS     r1,r1,#28             ;824
00004a  e7ef              B        |L41.44|
;;;832    
                          ENDP

                  |L41.76|
                          DCD      0x50000200
                  |L41.80|
                          DCD      0xffff9603

                          AREA ||i.DrvSYS_SetPLLContent||, CODE, READONLY, ALIGN=2

                  DrvSYS_SetPLLContent PROC
;;;1057   /*---------------------------------------------------------------------------------------------------------*/
;;;1058   void DrvSYS_SetPLLContent(uint32_t u32PllContent)
000000  490d              LDR      r1,|L42.56|
;;;1059   {
;;;1060       SYSCLK->PLLCON.FB_DV  = (u32PllContent & 0x01FF);
000002  6a0a              LDR      r2,[r1,#0x20]
000004  05c3              LSLS     r3,r0,#23
000006  0a52              LSRS     r2,r2,#9
000008  0252              LSLS     r2,r2,#9
00000a  0ddb              LSRS     r3,r3,#23
00000c  431a              ORRS     r2,r2,r3
00000e  620a              STR      r2,[r1,#0x20]
;;;1061       SYSCLK->PLLCON.IN_DV  = (u32PllContent >> 9) & 0x1F;
000010  6a0a              LDR      r2,[r1,#0x20]
000012  231f              MOVS     r3,#0x1f
000014  025b              LSLS     r3,r3,#9
000016  439a              BICS     r2,r2,r3
000018  0483              LSLS     r3,r0,#18
00001a  0edb              LSRS     r3,r3,#27
00001c  025b              LSLS     r3,r3,#9
00001e  431a              ORRS     r2,r2,r3
000020  620a              STR      r2,[r1,#0x20]
;;;1062       SYSCLK->PLLCON.OUT_DV = (u32PllContent >> 14) & 0x03;
000022  6a0a              LDR      r2,[r1,#0x20]
000024  2303              MOVS     r3,#3
000026  039b              LSLS     r3,r3,#14
000028  0400              LSLS     r0,r0,#16
00002a  0f80              LSRS     r0,r0,#30
00002c  439a              BICS     r2,r2,r3
00002e  0380              LSLS     r0,r0,#14
000030  4302              ORRS     r2,r2,r0
000032  620a              STR      r2,[r1,#0x20]
;;;1063   }
000034  4770              BX       lr
;;;1064   
                          ENDP

000036  0000              DCW      0x0000
                  |L42.56|
                          DCD      0x50000200

                          AREA ||i.DrvSYS_SetPLLMode||, CODE, READONLY, ALIGN=2

                  DrvSYS_SetPLLMode PROC
;;;950    /*---------------------------------------------------------------------------------------------------------*/
;;;951    void DrvSYS_SetPLLMode(int32_t i32Flag)
000000  4907              LDR      r1,|L43.32|
;;;952    {
;;;953        SYSCLK->PLLCON.OE = i32Flag;
000002  6a0a              LDR      r2,[r1,#0x20]
000004  024b              LSLS     r3,r1,#9
000006  439a              BICS     r2,r2,r3
000008  07c3              LSLS     r3,r0,#31
00000a  0b5b              LSRS     r3,r3,#13
00000c  431a              ORRS     r2,r2,r3
00000e  620a              STR      r2,[r1,#0x20]
;;;954        SYSCLK->PLLCON.PD = i32Flag;
000010  6a0a              LDR      r2,[r1,#0x20]
000012  01cb              LSLS     r3,r1,#7
000014  07c0              LSLS     r0,r0,#31
000016  439a              BICS     r2,r2,r3
000018  0bc0              LSRS     r0,r0,#15
00001a  4302              ORRS     r2,r2,r0
00001c  620a              STR      r2,[r1,#0x20]
;;;955    }
00001e  4770              BX       lr
;;;956    
                          ENDP

                  |L43.32|
                          DCD      0x50000200

                          AREA ||i.DrvSYS_SetPowerDownWakeUpInt||, CODE, READONLY, ALIGN=2

                  DrvSYS_SetPowerDownWakeUpInt PROC
;;;875    /*---------------------------------------------------------------------------------------------------------*/
;;;876    void DrvSYS_SetPowerDownWakeUpInt(int32_t i32Enable, PWRWU_CALLBACK pdwucallbackFn, int32_t i32enWUDelay)
000000  b570              PUSH     {r4-r6,lr}
;;;877    {
;;;878        SYSCLK->PWRCON.PD_WU_INT_EN = i32Enable;
000002  4b11              LDR      r3,|L44.72|
000004  681c              LDR      r4,[r3,#0]
000006  2520              MOVS     r5,#0x20
000008  43ac              BICS     r4,r4,r5
00000a  07c5              LSLS     r5,r0,#31
00000c  0ead              LSRS     r5,r5,#26
00000e  432c              ORRS     r4,r4,r5
000010  601c              STR      r4,[r3,#0]
;;;879        
;;;880        if (i32Enable)
;;;881        {
;;;882            SYSCLK->PWRCON.PD_WU_DLY = i32enWUDelay;
000012  2510              MOVS     r5,#0x10
000014  04dc              LSLS     r4,r3,#19
000016  2800              CMP      r0,#0                 ;880
;;;883            PWRWU_callbackFn = pdwucallbackFn;
000018  4e0c              LDR      r6,|L44.76|
;;;884            NVIC_SetPriority(PWRWU_IRQn, (1<<__NVIC_PRIO_BITS) - 2);
;;;885            NVIC_EnableIRQ(PWRWU_IRQn);
;;;886        }
;;;887        else
;;;888        { 
;;;889            SYSCLK->PWRCON.PD_WU_DLY = 0;
00001a  6818              LDR      r0,[r3,#0]
00001c  d00b              BEQ      |L44.54|
00001e  07d2              LSLS     r2,r2,#31             ;882
000020  43a8              BICS     r0,r0,r5              ;882
000022  0ed2              LSRS     r2,r2,#27             ;882
000024  4310              ORRS     r0,r0,r2              ;882
000026  6018              STR      r0,[r3,#0]            ;882
000028  6071              STR      r1,[r6,#4]            ;884  ; PWRWU_callbackFn
00002a  2102              MOVS     r1,#2                 ;884
00002c  201c              MOVS     r0,#0x1c              ;884
00002e  f7fffffe          BL       NVIC_SetPriority
000032  4807              LDR      r0,|L44.80|
000034  e005              B        |L44.66|
                  |L44.54|
000036  43a8              BICS     r0,r0,r5
000038  6018              STR      r0,[r3,#0]
;;;890            PWRWU_callbackFn = NULL;
00003a  2000              MOVS     r0,#0
00003c  6070              STR      r0,[r6,#4]  ; PWRWU_callbackFn
00003e  4804              LDR      r0,|L44.80|
000040  3080              ADDS     r0,r0,#0x80
                  |L44.66|
000042  6004              STR      r4,[r0,#0]
;;;891            NVIC_DisableIRQ(PWRWU_IRQn);
;;;892        }
;;;893    }
000044  bd70              POP      {r4-r6,pc}
;;;894    
                          ENDP

000046  0000              DCW      0x0000
                  |L44.72|
                          DCD      0x50000200
                  |L44.76|
                          DCD      ||.data||
                  |L44.80|
                          DCD      0xe000e100

                          AREA ||i.DrvSYS_UnlockProtectedReg||, CODE, READONLY, ALIGN=2

                  DrvSYS_UnlockProtectedReg PROC
;;;66     /*---------------------------------------------------------------------------------------------------------*/
;;;67     int32_t DrvSYS_UnlockProtectedReg(void)
000000  4807              LDR      r0,|L45.32|
;;;68     {
;;;69         uint32_t lockbit;
;;;70         
;;;71         SYS->REGWRPROT = 0x59;
000002  2159              MOVS     r1,#0x59
000004  6001              STR      r1,[r0,#0]
;;;72         SYS->REGWRPROT = 0x16;
000006  2116              MOVS     r1,#0x16
000008  6001              STR      r1,[r0,#0]
;;;73         SYS->REGWRPROT = 0x88;
00000a  2188              MOVS     r1,#0x88
00000c  6001              STR      r1,[r0,#0]
;;;74     
;;;75         lockbit = SYS->REGWRPROT & 0x01;
00000e  6800              LDR      r0,[r0,#0]
000010  07c0              LSLS     r0,r0,#31
000012  0fc0              LSRS     r0,r0,#31
000014  d001              BEQ      |L45.26|
;;;76         return (lockbit)? 0 : E_DRVSYS_ERR_UNLOCK_FAIL;
000016  2000              MOVS     r0,#0
;;;77     } 
000018  4770              BX       lr
                  |L45.26|
00001a  4802              LDR      r0,|L45.36|
00001c  4770              BX       lr
;;;78      
                          ENDP

00001e  0000              DCW      0x0000
                  |L45.32|
                          DCD      0x50000100
                  |L45.36|
                          DCD      0xffff9601

                          AREA ||i.NVIC_SetPriority||, CODE, READONLY, ALIGN=2

                  NVIC_SetPriority PROC
;;;866     */
;;;867    static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
000000  0783              LSLS     r3,r0,#30
;;;868    {
;;;869      if(IRQn < 0) {
;;;870        SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) | 
000002  22ff              MOVS     r2,#0xff
000004  0edb              LSRS     r3,r3,#27
000006  409a              LSLS     r2,r2,r3
000008  0789              LSLS     r1,r1,#30
00000a  0e09              LSRS     r1,r1,#24
00000c  4099              LSLS     r1,r1,r3
00000e  2800              CMP      r0,#0                 ;869
000010  da0b              BGE      |L46.42|
000012  0700              LSLS     r0,r0,#28
000014  0f00              LSRS     r0,r0,#28
000016  3808              SUBS     r0,r0,#8
000018  0883              LSRS     r3,r0,#2
00001a  4808              LDR      r0,|L46.60|
00001c  009b              LSLS     r3,r3,#2
00001e  1818              ADDS     r0,r3,r0
000020  69c3              LDR      r3,[r0,#0x1c]
000022  4393              BICS     r3,r3,r2
000024  430b              ORRS     r3,r3,r1
000026  61c3              STR      r3,[r0,#0x1c]
;;;871            (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
;;;872      else {
;;;873        NVIC->IPR[_IP_IDX(IRQn)] = (NVIC->IPR[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
;;;874            (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
;;;875    }
000028  4770              BX       lr
                  |L46.42|
00002a  0883              LSRS     r3,r0,#2              ;873
00002c  4804              LDR      r0,|L46.64|
00002e  009b              LSLS     r3,r3,#2              ;873
000030  1818              ADDS     r0,r3,r0              ;873
000032  6803              LDR      r3,[r0,#0]            ;873
000034  4393              BICS     r3,r3,r2              ;873
000036  430b              ORRS     r3,r3,r1              ;873
000038  6003              STR      r3,[r0,#0]            ;873
00003a  4770              BX       lr
;;;876    
                          ENDP

                  |L46.60|
                          DCD      0xe000ed00
                  |L46.64|
                          DCD      0xe000e400

                          AREA ||i.PWRWU_IRQHandler||, CODE, READONLY, ALIGN=2

                  PWRWU_IRQHandler PROC
;;;843    /*---------------------------------------------------------------------------------------------------------*/
;;;844    void PWRWU_IRQHandler(void)
000000  4805              LDR      r0,|L47.24|
;;;845    {
;;;846        SYSCLK->PWRCON.PD_WU_STS = 1;
000002  6801              LDR      r1,[r0,#0]
000004  2240              MOVS     r2,#0x40
000006  4311              ORRS     r1,r1,r2
000008  6001              STR      r1,[r0,#0]
;;;847        if (PWRWU_callbackFn != NULL)
00000a  4804              LDR      r0,|L47.28|
00000c  6840              LDR      r0,[r0,#4]  ; PWRWU_callbackFn
00000e  2800              CMP      r0,#0
000010  d000              BEQ      |L47.20|
;;;848            PWRWU_callbackFn(); 
000012  4700              BX       r0
                  |L47.20|
;;;849    }
000014  4770              BX       lr
;;;850    
                          ENDP

000016  0000              DCW      0x0000
                  |L47.24|
                          DCD      0x50000200
                  |L47.28|
                          DCD      ||.data||

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      0x00000001
                          DCD      0x00000002
                          DCD      0x00000002
                          DCD      0x00000004

                          AREA ||.data||, DATA, ALIGN=2

                  BOD_callbackFn
                          DCD      0x00000000
                  PWRWU_callbackFn
                          DCD      0x00000000

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L289.16|
00000e  461d              MOV      r5,r3
                  |L289.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP

